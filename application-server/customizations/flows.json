[
    {
        "id": "3a44a793.d4f7d8",
        "type": "tab",
        "label": "DBTest",
        "disabled": true,
        "info": ""
    },
    {
        "id": "5f53818c.186bc",
        "type": "tab",
        "label": "CheckRange",
        "disabled": true,
        "info": ""
    },
    {
        "id": "1cfb3818.d1db88",
        "type": "tab",
        "label": "EachSensor",
        "disabled": true,
        "info": ""
    },
    {
        "id": "3736a922.aa8396",
        "type": "tab",
        "label": "TestDataGen",
        "disabled": true,
        "info": ""
    },
    {
        "id": "92c9c3ef.39c9a",
        "type": "tab",
        "label": "RoleBasedLogin",
        "disabled": false,
        "info": ""
    },
    {
        "id": "85b67cb7.2993c",
        "type": "tab",
        "label": "sensor generator",
        "disabled": true,
        "info": ""
    },
    {
        "id": "79f883ec.307dec",
        "type": "tab",
        "label": "Flow 3",
        "disabled": true,
        "info": ""
    },
    {
        "id": "bd24bb3a.9e8d18",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "cf5d7930.352328",
        "order": 2,
        "disp": true,
        "width": "18",
        "collapse": false
    },
    {
        "id": "cf5d7930.352328",
        "type": "ui_tab",
        "z": "",
        "name": "Home",
        "icon": "dashboard",
        "disabled": true,
        "hidden": false
    },
    {
        "id": "91728dc6.857af",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#4e557b",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#4e557b",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#4e557b",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#7179a5",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#4e557b",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "true",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "9dba0d87.8df27",
        "type": "ui_group",
        "z": "",
        "name": "Sensor Status Board",
        "tab": "cf5d7930.352328",
        "order": 3,
        "disp": true,
        "width": "10",
        "collapse": true
    },
    {
        "id": "d75fe7b7.576378",
        "type": "ui_group",
        "z": "",
        "name": "Floor Map",
        "tab": "cf5d7930.352328",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "977359bb.95ba38",
        "type": "mqtt-broker",
        "z": "",
        "name": "localhost",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "8ac18d96.4f65c",
        "type": "users_config",
        "appPath": "/users",
        "jwtCookieName": "nr.nodeUsers.jwt",
        "jwtHttpsOnly": false
    },
    {
        "id": "b8131b4b.8b7018",
        "type": "ui_group",
        "z": "",
        "name": "Filters",
        "tab": "cf5d7930.352328",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "3985a5fa.25f74a",
        "type": "ui_group",
        "z": "",
        "name": "Farmer statistics",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "21b306d.4fb2afa",
        "type": "CassandraDatabase",
        "z": "",
        "hosts": "127.0.0.1",
        "port": "9042",
        "keyspace": "Network_Data"
    },
    {
        "id": "ecea06b.9181bf8",
        "type": "CassandraDatabase",
        "z": "",
        "hosts": "54.67.0.79",
        "port": "9042",
        "keyspace": "network"
    },
    {
        "id": "ac095742.0d78f8",
        "type": "ui_group",
        "z": "",
        "name": "Farmer statistics",
        "tab": "fca7d883.5fb068",
        "order": 3,
        "disp": true,
        "width": "27",
        "collapse": false
    },
    {
        "id": "1100fd68.7db503",
        "type": "CassandraDatabase",
        "z": "",
        "hosts": "54.67.0.79",
        "port": "9042",
        "keyspace": "cloud_sensor_data"
    },
    {
        "id": "fca7d883.5fb068",
        "type": "ui_tab",
        "z": "",
        "name": "Farmer",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7b23dd2d.8df864",
        "type": "ui_group",
        "z": "",
        "name": "Farm Overview",
        "tab": "fca7d883.5fb068",
        "order": 1,
        "disp": true,
        "width": "27",
        "collapse": false
    },
    {
        "id": "3b9f8378.fbea8c",
        "type": "CassandraDatabase",
        "z": "",
        "hosts": "54.67.0.79",
        "port": "9042",
        "keyspace": "cloud_sensor_data"
    },
    {
        "id": "5eebc43d.5088ac",
        "type": "ui_group",
        "z": "",
        "name": "IOT Status Chart",
        "tab": "68cd881c.0b2e58",
        "order": 2,
        "disp": true,
        "width": "27",
        "collapse": false
    },
    {
        "id": "68cd881c.0b2e58",
        "type": "ui_tab",
        "z": "",
        "name": "IOT Support",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1ded2a58.790dc6",
        "type": "CassandraDatabase",
        "z": "",
        "hosts": "54.67.0.79",
        "port": "9042",
        "keyspace": "cloud_sensor_data"
    },
    {
        "id": "8268cbef.0e3d98",
        "type": "ui_group",
        "z": "",
        "name": "Farmer Notifications",
        "tab": "fca7d883.5fb068",
        "order": 2,
        "disp": true,
        "width": "13",
        "collapse": false
    },
    {
        "id": "43a94fb9.161a7",
        "type": "ui_group",
        "z": "",
        "name": "Floor Map",
        "tab": "68cd881c.0b2e58",
        "order": 1,
        "disp": true,
        "width": "14",
        "collapse": false
    },
    {
        "id": "d8285633.fb3cc8",
        "type": "mqtt-broker",
        "z": "",
        "name": "localhost",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "d870d288.0a9d2",
        "type": "CassandraDatabase",
        "z": "",
        "hosts": "54.67.0.79",
        "port": "9042",
        "keyspace": "cloud_sensor_data"
    },
    {
        "id": "e81d613b.b7137",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "b6aee9de.0e7558",
        "order": 2,
        "disp": true,
        "width": "18",
        "collapse": false
    },
    {
        "id": "b6aee9de.0e7558",
        "type": "ui_tab",
        "z": "",
        "name": "Home",
        "icon": "dashboard",
        "disabled": true,
        "hidden": true
    },
    {
        "id": "69715470.1c769c",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#4e557b",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#4e557b",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#4e557b",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#7179a5",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#4e557b",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "true",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "ab2948ea.420c08",
        "type": "ui_group",
        "z": "",
        "name": "Sensor Status Board",
        "tab": "b6aee9de.0e7558",
        "order": 3,
        "disp": true,
        "width": "10",
        "collapse": true
    },
    {
        "id": "36df1de9.d7e1b2",
        "type": "ui_group",
        "z": "",
        "name": "Floor Map",
        "tab": "b6aee9de.0e7558",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "10b63f1b.6f9391",
        "type": "mqtt-broker",
        "z": "",
        "name": "localhost",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "1385826c.c5e1ce",
        "type": "users_config",
        "appPath": "/users",
        "jwtCookieName": "nr.nodeUsers.jwt",
        "jwtHttpsOnly": false
    },
    {
        "id": "7d67a0fd.2ad08",
        "type": "ui_group",
        "z": "",
        "name": "Filters",
        "tab": "b6aee9de.0e7558",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "65e6b016.a3652",
        "type": "ui_group",
        "z": "",
        "name": "Farmer statistics",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "d5689f9b.fd9db",
        "type": "CassandraDatabase",
        "z": "",
        "hosts": "34.210.88.7",
        "port": "9042",
        "keyspace": "network_data"
    },
    {
        "id": "224b7d26.67ca32",
        "type": "CassandraDatabase",
        "z": "",
        "hosts": "13.57.27.218",
        "port": "9042",
        "keyspace": "network"
    },
    {
        "id": "af4976b1.2695a8",
        "type": "ui_group",
        "z": "",
        "name": "Farmer statistics",
        "tab": "f117cae8.38d768",
        "order": 4,
        "disp": true,
        "width": "27",
        "collapse": false
    },
    {
        "id": "2a4a094f.663ed6",
        "type": "CassandraDatabase",
        "z": "",
        "hosts": "34.210.88.7",
        "port": "9042",
        "keyspace": "cloud_sensor_data"
    },
    {
        "id": "f117cae8.38d768",
        "type": "ui_tab",
        "z": "",
        "name": "Farmer",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1c96a990.7978c6",
        "type": "CassandraDatabase",
        "z": "",
        "hosts": "13.57.27.218",
        "port": "9042",
        "keyspace": "cloud_sensor_data"
    },
    {
        "id": "b40dd8b3.658c48",
        "type": "ui_group",
        "z": "",
        "name": "IOT Status Chart",
        "tab": "5a3643e6.00972c",
        "order": 2,
        "disp": true,
        "width": "27",
        "collapse": false
    },
    {
        "id": "5a3643e6.00972c",
        "type": "ui_tab",
        "z": "",
        "name": "IOT Support",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8cc9d8c6.579f58",
        "type": "CassandraDatabase",
        "z": "",
        "hosts": "34.210.88.7",
        "port": "9042",
        "keyspace": "cloud_sensor_data"
    },
    {
        "id": "faca4658.70a1f8",
        "type": "ui_group",
        "z": "",
        "name": "Farmer Notifications",
        "tab": "f117cae8.38d768",
        "order": 2,
        "disp": true,
        "width": "13",
        "collapse": true
    },
    {
        "id": "c17b876f.2eca08",
        "type": "ui_group",
        "z": "",
        "name": "Floor Map",
        "tab": "5a3643e6.00972c",
        "order": 1,
        "disp": true,
        "width": "14",
        "collapse": false
    },
    {
        "id": "933f8f51.89678",
        "type": "mqtt-broker",
        "z": "",
        "name": "localhost",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "bc2bafdd.22f21",
        "type": "CassandraDatabase",
        "z": "",
        "hosts": "13.57.27.218",
        "port": "9042",
        "keyspace": "cloud_sensor_data"
    },
    {
        "id": "e985d58d.3a3f68",
        "type": "mqtt-broker",
        "z": "",
        "name": "localhost",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "e5962960.8b5d88",
        "type": "CassandraDatabase",
        "z": "",
        "hosts": "18.236.211.38",
        "port": "9042",
        "keyspace": "cloud_sensor_data"
    },
    {
        "id": "f11153fa.1440f",
        "type": "mqtt-broker",
        "z": "",
        "name": "localhost",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "9556f304.0db0d",
        "type": "CassandraDatabase",
        "z": "",
        "hosts": "18.236.211.38",
        "port": "9042",
        "keyspace": "cloud_sensor_data"
    },
    {
        "id": "ac401990.62d6b8",
        "type": "CassandraDatabase",
        "z": "",
        "hosts": "34.210.88.7",
        "port": "9042",
        "keyspace": "cloud_sensor_data"
    },
    {
        "id": "859bf179.9472a",
        "type": "ui_group",
        "z": "",
        "name": "Farmer Notifications",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "13",
        "collapse": false
    },
    {
        "id": "8fc6074c.ac30c8",
        "type": "ui_group",
        "z": "",
        "name": "Floor Map",
        "tab": "f117cae8.38d768",
        "order": 3,
        "disp": true,
        "width": "13",
        "collapse": false
    },
    {
        "id": "f60381f8.c6e2",
        "type": "CassandraDatabase",
        "z": "",
        "hosts": "54.67.0.79",
        "port": "9042",
        "keyspace": "Network"
    },
    {
        "id": "fc6a590b.635c68",
        "type": "ui_group",
        "z": "",
        "name": "IOT location",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "27",
        "collapse": false
    },
    {
        "id": "b436b97d.0a9248",
        "type": "ui_group",
        "z": "",
        "name": "Farm Overview",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": "27",
        "collapse": false
    },
    {
        "id": "8615499d.0d0688",
        "type": "ui_group",
        "z": "",
        "name": "IOT Status Chart",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "27",
        "collapse": false
    },
    {
        "id": "fe13dd98.6254b",
        "type": "CassandraDatabase",
        "z": "",
        "hosts": "34.210.88.7",
        "port": "9042",
        "keyspace": "cloud_sensor_data"
    },
    {
        "id": "69f2a424.7e258c",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "af4976b1.2695a8",
        "order": 2,
        "width": "3",
        "height": "5"
    },
    {
        "id": "f92c8add.a24488",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "af4976b1.2695a8",
        "order": 4,
        "width": "3",
        "height": "5"
    },
    {
        "id": "c07f68a1.819ca8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "af4976b1.2695a8",
        "order": 6,
        "width": "5",
        "height": "5"
    },
    {
        "id": "27bc5c3e.b78954",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "af4976b1.2695a8",
        "order": 8,
        "width": "3",
        "height": "5"
    },
    {
        "id": "6f1f3d12.49d584",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "af4976b1.2695a8",
        "order": 10,
        "width": "5",
        "height": "5"
    },
    {
        "id": "b427e3f9.55255",
        "type": "mqtt-broker",
        "z": "",
        "name": "localhost",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "95405a5.d019ea8",
        "type": "CassandraDatabase",
        "z": "",
        "hosts": "34.210.88.7",
        "port": "9042",
        "keyspace": "cloud_sensor_data"
    },
    {
        "id": "6e2151a7.37b13",
        "type": "inject",
        "z": "3a44a793.d4f7d8",
        "name": "",
        "topic": "",
        "payload": "{\"name\":\"Emergency Medical Operation\",\"lat\":37.33,\"lon\":-121.91,\"SIDC\":\"ENOPA-------\",\"options\":{\"fillOpacity\":0.8}}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 150,
        "y": 60,
        "wires": [
            [
                "a79edfa6.64fe8"
            ]
        ]
    },
    {
        "id": "1ab9fafc.7e80b5",
        "type": "worldmap",
        "z": "3a44a793.d4f7d8",
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "true",
        "panlock": "false",
        "zoomlock": "false",
        "path": "/worldmap",
        "x": 500,
        "y": 60,
        "wires": []
    },
    {
        "id": "a79edfa6.64fe8",
        "type": "worldmap-tracks",
        "z": "3a44a793.d4f7d8",
        "name": "",
        "depth": 20,
        "x": 340,
        "y": 60,
        "wires": [
            [
                "1ab9fafc.7e80b5"
            ]
        ]
    },
    {
        "id": "b9d84a0a.448b88",
        "type": "inject",
        "z": "5f53818c.186bc",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "1979840f.64c3cc"
            ]
        ]
    },
    {
        "id": "1979840f.64c3cc",
        "type": "data-generator",
        "z": "5f53818c.186bc",
        "name": "Humidity",
        "field": "payload",
        "fieldType": "msg",
        "syntax": "json",
        "template": "{\n    \"sensorId\": \"{{int 1 100}}\",\n    \"farmId\": \"{{int 1 100}}\",\n    \"ranchId\": \"{{int 1 100}}\",\n    \"clusterId\": \"{{int 1 100}}\",\n    \"date\":  \"{{date '2019-04-14' '2019-04-14' 'YYYY/MM/DD'}}\",\n    \"time\": \"{{time '00:00' '23:59'}}\",\n    \"value\": \"{{int 50 100}}\"\n}",
        "x": 280,
        "y": 60,
        "wires": [
            [
                "1e42f0b9.0a344f"
            ]
        ]
    },
    {
        "id": "4baf15d6.d167ec",
        "type": "function",
        "z": "5f53818c.186bc",
        "name": "json parse",
        "func": "try {\n    msg.payload = JSON.parse(msg.payload);\n} catch (e) {\n    node.error(`error in json parse: ${e}`);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 120,
        "wires": [
            [
                "f0172745.932898"
            ]
        ]
    },
    {
        "id": "f0172745.932898",
        "type": "debug",
        "z": "5f53818c.186bc",
        "name": "HumidityMsg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 470,
        "y": 120,
        "wires": []
    },
    {
        "id": "32108314.1fc83c",
        "type": "mqtt in",
        "z": "5f53818c.186bc",
        "name": "/humidityTopic",
        "topic": "/humidityTopic",
        "qos": "2",
        "broker": "10b63f1b.6f9391",
        "x": 100,
        "y": 120,
        "wires": [
            [
                "4baf15d6.d167ec"
            ]
        ]
    },
    {
        "id": "ab30b0d2.c3ba6",
        "type": "mqtt out",
        "z": "5f53818c.186bc",
        "name": "/humidityTopic",
        "topic": "/humidityTopic",
        "qos": "",
        "retain": "",
        "broker": "10b63f1b.6f9391",
        "x": 680,
        "y": 60,
        "wires": []
    },
    {
        "id": "a5e72e79.e8bad",
        "type": "http in",
        "z": "1cfb3818.d1db88",
        "name": "POST /flowdata",
        "url": "/flowdata",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 100,
        "wires": [
            [
                "dd548a16.8c06e8"
            ]
        ]
    },
    {
        "id": "738762fb.2e6ebc",
        "type": "http response",
        "z": "1cfb3818.d1db88",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 450,
        "y": 100,
        "wires": []
    },
    {
        "id": "dd548a16.8c06e8",
        "type": "function",
        "z": "1cfb3818.d1db88",
        "name": "process request",
        "func": "const flowdata = flow.get(\"data\") || [];\nconst body = msg.req.body;\nif(body.add) {\n    body.add.forEach(newData => {\n        flowdata.push(newData);\n    })\n}\nflow.set(\"data\", flowdata);\nmsg.payload = flowdata;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 100,
        "wires": [
            [
                "738762fb.2e6ebc"
            ]
        ]
    },
    {
        "id": "cbfe94ca.8e5858",
        "type": "http in",
        "z": "1cfb3818.d1db88",
        "name": "GET /flowdata",
        "url": "/flowdata",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 40,
        "wires": [
            [
                "fac33b5d.989208"
            ]
        ]
    },
    {
        "id": "9ff42f13.1c812",
        "type": "http response",
        "z": "1cfb3818.d1db88",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 470,
        "y": 40,
        "wires": []
    },
    {
        "id": "fac33b5d.989208",
        "type": "function",
        "z": "1cfb3818.d1db88",
        "name": "process request",
        "func": "msg.payload = {\n    \"flow data\": flow.get(\"data\") || []\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 40,
        "wires": [
            [
                "9ff42f13.1c812"
            ]
        ]
    },
    {
        "id": "e3266b0c.3f7558",
        "type": "http in",
        "z": "1cfb3818.d1db88",
        "name": "/dashboard",
        "url": "/dashboard",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "3ef8104e.fba19"
            ]
        ]
    },
    {
        "id": "3ef8104e.fba19",
        "type": "users_isloggedin",
        "z": "1cfb3818.d1db88",
        "name": "",
        "enableCustomHandler": false,
        "outputs": 1,
        "x": 260,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "c4107e33.d8c6a",
        "type": "users_isloggedin",
        "z": "92c9c3ef.39c9a",
        "name": "",
        "enableCustomHandler": true,
        "outputs": 2,
        "x": 230,
        "y": 140,
        "wires": [
            [
                "26bbc347.849e0c"
            ],
            [
                "5201f00e.e4fa"
            ]
        ]
    },
    {
        "id": "3293f591.c5395a",
        "type": "http in",
        "z": "92c9c3ef.39c9a",
        "name": "",
        "url": "/demo",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 60,
        "y": 140,
        "wires": [
            [
                "c4107e33.d8c6a"
            ]
        ]
    },
    {
        "id": "26bbc347.849e0c",
        "type": "template",
        "z": "92c9c3ef.39c9a",
        "name": "for admins onl",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n    <head>\n        <script>\n            window.top.location.href = \"http://localhost:3000\"; \n        </script>\n    </head>\n    <body></body>\n</html>",
        "x": 520,
        "y": 100,
        "wires": [
            [
                "7a35c29c.ada97c"
            ]
        ]
    },
    {
        "id": "7a35c29c.ada97c",
        "type": "http response",
        "z": "92c9c3ef.39c9a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 100,
        "wires": []
    },
    {
        "id": "73b7f45e.ffffbc",
        "type": "template",
        "z": "92c9c3ef.39c9a",
        "name": "for allowed users only",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n    <head>\n        <title>Node users demo</title>\n        <style>\n            * {\n                color: #fff;\n            }\n            h1 {\n                font-size: 120px;\n                color: #fff;\n                padding: 20px;\n            }\n        </style>\n    </head>\n    <body style=\"text-align: center; background: #010203;\">\n        <h1>LOGIN SUCCESS !!!</h1>\n        <h2>User: {{payload.user.username}}</h2>\n        <h2>Scope: {{payload.user.scope}}</h2>\n    </body>\n</html>",
        "x": 660,
        "y": 140,
        "wires": [
            [
                "8937bf01.e1e27"
            ]
        ]
    },
    {
        "id": "8937bf01.e1e27",
        "type": "http response",
        "z": "92c9c3ef.39c9a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 140,
        "wires": []
    },
    {
        "id": "dc2d184d.7e2fc8",
        "type": "switch",
        "z": "92c9c3ef.39c9a",
        "name": "check user scope",
        "property": "payload.user.scope",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "admin",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "5201f00e.e4fa",
        "type": "template",
        "z": "92c9c3ef.39c9a",
        "name": "custom login page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n  <meta name=\"mobile-web-app-capable\" content=\"yes\">\n  <style>\n      * {\n  box-sizing: border-box;\n}\n\nhtml {\n  height: 100%;\n}\n\nbody {\n  margin: 0;\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 15px;\n  background: #000;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\n.form-group input {\n  width: 100%;\n  border-radius: 2px;\n\n  display: block;\n  width: 100%;\n  height: 34px;\n  padding: 6px 12px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #555;\n  outline: 0;\n  border: 1px solid #ddd;\n}\n\n.login-wrapper > a, button {\n  text-decoration: none;\n  cursor: pointer;\n  background-color: #00979C;\n  border: 1px solid #008d92;\n  color: #f3f5f6;\n  transition: color 0.2s, background-color 0.2s;\n\n  text-align: center;\n  padding: 12px 60px;\n  font-size: 1.2rem;\n  display: inline-block;\n  margin-bottom: 1rem;\n  border-radius: 2px;\n  background-color: #00979C;\n  font-weight: bold;\n  text-transform: uppercase;\n}\n\n.login-wrapper > a:hover, .login-wrapper > a:active,\nbutton:hover, button:active {\n  background-color: #00b5bb;\n  color: #f3f5f6;\n  border-color: #00abb0;\n}\n\n.login-wrapper {\n  position: absolute;\n  padding: 15px;\n  margin: 0 auto;\n  width: 400px;\n  color: #EFF0F1;\n  text-align: center;\n  left: calc(50% - 200px);\n  top: calc(50% - 180px);\n}\n\n.response {\n  margin-top: 10px;\n  padding: 15px;\n  color: #fff;\n  border-radius: 2px;\n}\n\n.response.success {\n  background-color: #51b385;\n  border-color: #63bb92;\n}\n\n.response.error {\n  background-color: #c11532;\n  border-color: #c11532;\n}\n\n@media (max-width: 768px) {\n  .login-wrapper {\n    width: 100%;\n    left: 0;\n    top: 100px;\n    padding: 15px 30px;\n  }\n}\n  </style>\n  <title>Node-RED Node Users</title>\n</head>\n<body>\n\n  <div class=\"login-wrapper\">\n    \n    <h1>Custom Users Login</h1>\n    <form id=\"login-form\">\n      <div class=\"form-group\">\n        <input type=\"text\" name=\"username\" placeholder=\"Username\"/>  \n      </div>\n      <div class=\"form-group\">\n        <input type=\"password\" name=\"password\" placeholder=\"Password\"/>  \n      </div>\n      <button type=\"submit\">Login</button>\n      <div class=\"response\"></div>\n    </form>\n\n  </div>\n    \n  <script src=\"http://code.jquery.com/jquery-3.3.1.min.js\"></script>\n  <script>\n    var responseTimer;\n\n    function showResponse(message, type) {\n      $(\".response\").text(message);\n      $(\".response\").removeClass(\"success\").removeClass(\"error\").addClass(type).show();\n\n      clearTimeout(responseTimer);\n      responseTimer = setTimeout(function () {\n        $(\".response\").fadeOut();\n      }, 4000);\n    }\n\n    function getParameterByName(name) {\n      var match = RegExp('[?&]' + name + '=([^&]*)').exec(window.location.search);\n      return match && decodeURIComponent(match[1].replace(/\\+/g, ' '));\n    }\n\n    $(\"#login-form\").submit(function (e) {\n      e.preventDefault();\n      var username = $(this).find(\"input[name=username]\").val();\n      var password = $(this).find(\"input[name=password]\").val();\n      var cred = {\n        username: username,\n        password: password\n      };\n      $.post('/users', cred).done(function () {\n        showResponse(\"Login success! Redirecting...\", \"success\");\n        setTimeout(function () {\n            window.location = '/demo';  \n        }, 2000);        \n      }).fail(function (xhr) {\n        var msg = \"\";\n        switch(xhr.status) {\n          case 0:\n            msg = \"Failed to connect with server.\";\n            break;\n          case 401: \n            msg = \"Unauthorized: username and password not found\";\n            break;\n          default: \n            msg = \"Server error: oops.. something went wrong...\";\n        }\n        showResponse(msg, \"error\");\n      });\n    });\n  </script>\n\n</body>\n</html>",
        "x": 330,
        "y": 220,
        "wires": [
            [
                "dd5212a7.2029b"
            ]
        ]
    },
    {
        "id": "dd5212a7.2029b",
        "type": "http response",
        "z": "92c9c3ef.39c9a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 510,
        "y": 220,
        "wires": []
    },
    {
        "id": "f82f6aef.017048",
        "type": "comment",
        "z": "92c9c3ef.39c9a",
        "name": "User unauthorized, show login page",
        "info": "",
        "x": 480,
        "y": 180,
        "wires": []
    },
    {
        "id": "e77d8784.1a5d08",
        "type": "comment",
        "z": "92c9c3ef.39c9a",
        "name": "User authorized, allow through",
        "info": "",
        "x": 460,
        "y": 40,
        "wires": []
    },
    {
        "id": "1af50e0c.34e4d2",
        "type": "data-generator",
        "z": "5f53818c.186bc",
        "name": "Temp",
        "field": "payload",
        "fieldType": "msg",
        "syntax": "json",
        "template": "{\n    \"sensorId\": \"{{int 1 100}}\",\n    \"farmId\": \"{{int 1 100}}\",\n    \"ranchId\": \"{{int 1 100}}\",\n    \"clusterId\": \"{{int 1 100}}\",\n    \"date\":  \"{{date '2019-04-14' '2019-04-14' 'YYYY/MM/DD'}}\",\n    \"time\": \"{{time '00:00' '23:59'}}\",\n    \"value\": \"{{int 50 100}}\"\n}",
        "x": 270,
        "y": 180,
        "wires": [
            [
                "3b06bdd4.dc4e72"
            ]
        ]
    },
    {
        "id": "d4358453.a6b0a8",
        "type": "function",
        "z": "5f53818c.186bc",
        "name": "json parse",
        "func": "try {\n    msg.payload = JSON.parse(msg.payload);\n} catch (e) {\n    node.error(`error in json parse: ${e}`);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 240,
        "wires": [
            [
                "537ec13c.28d9a"
            ]
        ]
    },
    {
        "id": "537ec13c.28d9a",
        "type": "debug",
        "z": "5f53818c.186bc",
        "name": "TempMsg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 460,
        "y": 240,
        "wires": []
    },
    {
        "id": "477df781.2664b8",
        "type": "mqtt in",
        "z": "5f53818c.186bc",
        "name": "/tempTopic",
        "topic": "/tempTopic",
        "qos": "2",
        "broker": "10b63f1b.6f9391",
        "x": 80,
        "y": 240,
        "wires": [
            [
                "d4358453.a6b0a8"
            ]
        ]
    },
    {
        "id": "e43d75e0.985518",
        "type": "mqtt out",
        "z": "5f53818c.186bc",
        "name": "/tempTopic",
        "topic": "/tempTopic",
        "qos": "",
        "retain": "",
        "broker": "10b63f1b.6f9391",
        "x": 630,
        "y": 180,
        "wires": []
    },
    {
        "id": "260b3b0b.71c6a4",
        "type": "inject",
        "z": "5f53818c.186bc",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "x": 100,
        "y": 180,
        "wires": [
            [
                "1af50e0c.34e4d2"
            ]
        ]
    },
    {
        "id": "5d08573f.1fe928",
        "type": "data-generator",
        "z": "5f53818c.186bc",
        "name": "WindSpeed",
        "field": "payload",
        "fieldType": "msg",
        "syntax": "json",
        "template": "{\n    \"sensorId\": \"{{int 1 100}}\",\n    \"farmId\": \"{{int 1 100}}\",\n    \"ranchId\": \"{{int 1 100}}\",\n    \"clusterId\": \"{{int 1 100}}\",\n    \"date\":  \"{{date '2019-04-14' '2019-04-14' 'YYYY/MM/DD'}}\",\n    \"time\": \"{{time '00:00' '23:59'}}\",\n    \"value\": \"{{int 50 100}}\"\n}",
        "x": 290,
        "y": 300,
        "wires": [
            [
                "9e606976.aa0cf8"
            ]
        ]
    },
    {
        "id": "8329a3f0.d2bb",
        "type": "function",
        "z": "5f53818c.186bc",
        "name": "json parse",
        "func": "try {\n    msg.payload = JSON.parse(msg.payload);\n} catch (e) {\n    node.error(`error in json parse: ${e}`);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 360,
        "wires": [
            [
                "91c89aa0.403a28"
            ]
        ]
    },
    {
        "id": "91c89aa0.403a28",
        "type": "debug",
        "z": "5f53818c.186bc",
        "name": "WindSpeedMsg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 480,
        "y": 360,
        "wires": []
    },
    {
        "id": "52c51e80.f5985",
        "type": "mqtt in",
        "z": "5f53818c.186bc",
        "name": "/windspeedtopic",
        "topic": "/windspeedtopic",
        "qos": "2",
        "broker": "10b63f1b.6f9391",
        "x": 100,
        "y": 360,
        "wires": [
            [
                "8329a3f0.d2bb"
            ]
        ]
    },
    {
        "id": "bbb2caf1.c2ac28",
        "type": "mqtt out",
        "z": "5f53818c.186bc",
        "name": "/windspeedtopic",
        "topic": "/windspeedtopic",
        "qos": "2",
        "retain": "",
        "broker": "10b63f1b.6f9391",
        "x": 690,
        "y": 300,
        "wires": []
    },
    {
        "id": "56fc417f.c0c6f",
        "type": "inject",
        "z": "5f53818c.186bc",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "x": 100,
        "y": 300,
        "wires": [
            [
                "5d08573f.1fe928"
            ]
        ]
    },
    {
        "id": "8234b4df.725f08",
        "type": "data-generator",
        "z": "5f53818c.186bc",
        "name": "WindDirection",
        "field": "payload",
        "fieldType": "msg",
        "syntax": "json",
        "template": "{\n    \"sensorId\": \"{{int 1 100}}\",\n    \"farmId\": \"{{int 1 100}}\",\n    \"ranchId\": \"{{int 1 100}}\",\n    \"clusterId\": \"{{int 1 100}}\",\n    \"date\":  \"{{date '2019-04-14' '2019-04-14' 'YYYY/MM/DD'}}\",\n    \"time\": \"{{time '00:00' '23:59'}}\",\n    \"value\": \"{{int 50 100}}\"\n}",
        "x": 300,
        "y": 420,
        "wires": [
            [
                "eeac5a97.a70ce8"
            ]
        ]
    },
    {
        "id": "f326184f.e9e938",
        "type": "function",
        "z": "5f53818c.186bc",
        "name": "json parse",
        "func": "try {\n    msg.payload = JSON.parse(msg.payload);\n} catch (e) {\n    node.error(`error in json parse: ${e}`);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 480,
        "wires": [
            [
                "56ab5050.1cdd8"
            ]
        ]
    },
    {
        "id": "56ab5050.1cdd8",
        "type": "debug",
        "z": "5f53818c.186bc",
        "name": "/winddirectionMsg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 510,
        "y": 480,
        "wires": []
    },
    {
        "id": "590b47f9.b3af08",
        "type": "mqtt in",
        "z": "5f53818c.186bc",
        "name": "/winddirectiontopic",
        "topic": "/winddirectiontopic",
        "qos": "2",
        "broker": "10b63f1b.6f9391",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "f326184f.e9e938"
            ]
        ]
    },
    {
        "id": "ee3f7dc3.509be",
        "type": "mqtt out",
        "z": "5f53818c.186bc",
        "name": "/winddirectiontopic",
        "topic": "/winddirectiontopic",
        "qos": "2",
        "retain": "",
        "broker": "10b63f1b.6f9391",
        "x": 690,
        "y": 420,
        "wires": []
    },
    {
        "id": "9ba81859.9d4b68",
        "type": "inject",
        "z": "5f53818c.186bc",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "x": 120,
        "y": 420,
        "wires": [
            [
                "8234b4df.725f08"
            ]
        ]
    },
    {
        "id": "9b08d5dd.a40c78",
        "type": "data-generator",
        "z": "5f53818c.186bc",
        "name": "Rain",
        "field": "payload",
        "fieldType": "msg",
        "syntax": "json",
        "template": "{\n    \"sensorId\": \"{{int 1 100}}\",\n    \"farmId\": \"{{int 1 100}}\",\n    \"ranchId\": \"{{int 1 100}}\",\n    \"clusterId\": \"{{int 1 100}}\",\n    \"date\":  \"{{date '2019-04-14' '2019-04-14' 'YYYY/MM/DD'}}\",\n    \"time\": \"{{time '00:00' '23:59'}}\",\n    \"value\": \"{{int 50 100}}\"\n}",
        "x": 290,
        "y": 540,
        "wires": [
            [
                "822b05e6.4bf1a8"
            ]
        ]
    },
    {
        "id": "44235889.c30798",
        "type": "function",
        "z": "5f53818c.186bc",
        "name": "json parse",
        "func": "try {\n    msg.payload = JSON.parse(msg.payload);\n} catch (e) {\n    node.error(`error in json parse: ${e}`);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 600,
        "wires": [
            [
                "cf072220.8a7ac"
            ]
        ]
    },
    {
        "id": "cf072220.8a7ac",
        "type": "debug",
        "z": "5f53818c.186bc",
        "name": "/rainMsg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 480,
        "y": 600,
        "wires": []
    },
    {
        "id": "f8e30ce7.9584c",
        "type": "mqtt in",
        "z": "5f53818c.186bc",
        "name": "/raintopic",
        "topic": "/raintopic",
        "qos": "2",
        "broker": "10b63f1b.6f9391",
        "x": 100,
        "y": 600,
        "wires": [
            [
                "44235889.c30798"
            ]
        ]
    },
    {
        "id": "8d196576.6d8788",
        "type": "mqtt out",
        "z": "5f53818c.186bc",
        "name": "/raintopic",
        "topic": "/raintopic",
        "qos": "2",
        "retain": "",
        "broker": "10b63f1b.6f9391",
        "x": 640,
        "y": 540,
        "wires": []
    },
    {
        "id": "cf4f8f75.9c68e",
        "type": "inject",
        "z": "5f53818c.186bc",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "x": 120,
        "y": 540,
        "wires": [
            [
                "9b08d5dd.a40c78"
            ]
        ]
    },
    {
        "id": "1e42f0b9.0a344f",
        "type": "function",
        "z": "5f53818c.186bc",
        "name": "adjustRange",
        "func": "if(typeof msg.payload === \"object\"){\nvar tstr = msg.payload.time.toString();\nvar hourarray=tstr.split(\":\",1);\nvar hour = parseInt(hourarray[0], 10);\n    if(hour >= 7 && hour <= 12 ) { \n        msg.payload.value = Math.floor(Math.random() * 6) + 70;\n    }\n    if(hour > 12 && hour <= 18 ) { \n        msg.payload.value = Math.floor((Math.random() * 6) + 60);\n    }\n    if(hour > 18 && hour <= 23 ) { \n        msg.payload.value = Math.floor((Math.random() * 6) + 65);\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 60,
        "wires": [
            [
                "ab30b0d2.c3ba6"
            ]
        ]
    },
    {
        "id": "3b06bdd4.dc4e72",
        "type": "function",
        "z": "5f53818c.186bc",
        "name": "adjustRange",
        "func": "if(typeof msg.payload === \"object\"){\nvar tstr = msg.payload.time.toString();\nvar hourarray=tstr.split(\":\",1);\nvar hour = parseInt(hourarray[0], 10);\n    if(hour >= 7 && hour <= 12 ) { \n        msg.payload.value = Math.floor(Math.random() * 4) + 40;\n    }\n    if(hour > 12 && hour <= 18 ) { \n        msg.payload.value = Math.floor((Math.random() * 5) + 44);\n    }\n    if(hour > 18 && hour <= 23 ) { \n        msg.payload.value = Math.floor((Math.random() * 4) + 35);\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 180,
        "wires": [
            [
                "e43d75e0.985518"
            ]
        ]
    },
    {
        "id": "9e606976.aa0cf8",
        "type": "function",
        "z": "5f53818c.186bc",
        "name": "adjustRange",
        "func": "if(typeof msg.payload === \"object\"){\nvar tstr = msg.payload.time.toString();\nvar hourarray=tstr.split(\":\",1);\nvar hour = parseInt(hourarray[0], 10);\n    if(hour >= 7 && hour <= 12 ) { \n        msg.payload.value = Math.floor(Math.random() * 4) + 40;\n    }\n    if(hour > 12 && hour <= 18 ) { \n        msg.payload.value = Math.floor((Math.random() * 5) + 44);\n    }\n    if(hour > 18 && hour <= 23 ) { \n        msg.payload.value = Math.floor((Math.random() * 4) + 35);\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 300,
        "wires": [
            [
                "bbb2caf1.c2ac28"
            ]
        ]
    },
    {
        "id": "eeac5a97.a70ce8",
        "type": "function",
        "z": "5f53818c.186bc",
        "name": "adjustRange",
        "func": "if(typeof msg.payload === \"object\"){\nvar tstr = msg.payload.time.toString();\nvar hourarray=tstr.split(\":\",1);\nvar hour = parseInt(hourarray[0], 10);\n    if(hour >= 7 && hour <= 12 ) { \n        msg.payload.value = Math.floor(Math.random() * 4) + 40;\n    }\n    if(hour > 12 && hour <= 18 ) { \n        msg.payload.value = Math.floor((Math.random() * 5) + 44);\n    }\n    if(hour > 18 && hour <= 23 ) { \n        msg.payload.value = Math.floor((Math.random() * 4) + 35);\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 420,
        "wires": [
            [
                "ee3f7dc3.509be"
            ]
        ]
    },
    {
        "id": "822b05e6.4bf1a8",
        "type": "function",
        "z": "5f53818c.186bc",
        "name": "adjustRange",
        "func": "if(typeof msg.payload === \"object\"){\nvar tstr = msg.payload.time.toString();\nvar hourarray=tstr.split(\":\",1);\nvar hour = parseInt(hourarray[0], 10);\n    if(hour >= 7 && hour <= 12 ) { \n        msg.payload.value = Math.floor(Math.random() * 4) + 40;\n    }\n    if(hour > 12 && hour <= 18 ) { \n        msg.payload.value = Math.floor((Math.random() * 5) + 44);\n    }\n    if(hour > 18 && hour <= 23 ) { \n        msg.payload.value = Math.floor((Math.random() * 4) + 35);\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 540,
        "wires": [
            [
                "8d196576.6d8788"
            ]
        ]
    },
    {
        "id": "ea829f0c.21699",
        "type": "data-generator",
        "z": "5f53818c.186bc",
        "name": "Moisture",
        "field": "payload",
        "fieldType": "msg",
        "syntax": "json",
        "template": "{\n    \"sensorId\": \"{{int 1 100}}\",\n    \"farmId\": \"{{int 1 100}}\",\n    \"ranchId\": \"{{int 1 100}}\",\n    \"clusterId\": \"{{int 1 100}}\",\n    \"date\":  \"{{date '2019-04-14' '2019-04-14' 'YYYY/MM/DD'}}\",\n    \"time\": \"{{time '00:00' '23:59'}}\",\n    \"value\": \"{{int 50 100}}\"\n}",
        "x": 280,
        "y": 660,
        "wires": [
            [
                "280aab4a.ba4804"
            ]
        ]
    },
    {
        "id": "f9b24cf.55796b",
        "type": "function",
        "z": "5f53818c.186bc",
        "name": "json parse",
        "func": "try {\n    msg.payload = JSON.parse(msg.payload);\n} catch (e) {\n    node.error(`error in json parse: ${e}`);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 720,
        "wires": [
            [
                "888782db.b40fa"
            ]
        ]
    },
    {
        "id": "888782db.b40fa",
        "type": "debug",
        "z": "5f53818c.186bc",
        "name": "/moistureMsg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 480,
        "y": 720,
        "wires": []
    },
    {
        "id": "b8be3a7f.8d0148",
        "type": "mqtt in",
        "z": "5f53818c.186bc",
        "name": "/moisturetopic",
        "topic": "/moisturetopic",
        "qos": "2",
        "broker": "10b63f1b.6f9391",
        "x": 90,
        "y": 720,
        "wires": [
            [
                "f9b24cf.55796b"
            ]
        ]
    },
    {
        "id": "245c9629.a610da",
        "type": "mqtt out",
        "z": "5f53818c.186bc",
        "name": "/moisturetopic",
        "topic": "/moisturetopic",
        "qos": "2",
        "retain": "",
        "broker": "10b63f1b.6f9391",
        "x": 640,
        "y": 660,
        "wires": []
    },
    {
        "id": "a8a75268.e2b93",
        "type": "inject",
        "z": "5f53818c.186bc",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "x": 100,
        "y": 660,
        "wires": [
            [
                "ea829f0c.21699"
            ]
        ]
    },
    {
        "id": "280aab4a.ba4804",
        "type": "function",
        "z": "5f53818c.186bc",
        "name": "adjustRange",
        "func": "if(typeof msg.payload === \"object\"){\nvar tstr = msg.payload.time.toString();\nvar hourarray=tstr.split(\":\",1);\nvar hour = parseInt(hourarray[0], 10);\n    if(hour >= 7 && hour <= 12 ) { \n        msg.payload.value = Math.floor(Math.random() * 4) + 40;\n    }\n    if(hour > 12 && hour <= 18 ) { \n        msg.payload.value = Math.floor((Math.random() * 5) + 44);\n    }\n    if(hour > 18 && hour <= 23 ) { \n        msg.payload.value = Math.floor((Math.random() * 4) + 35);\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 660,
        "wires": [
            [
                "245c9629.a610da"
            ]
        ]
    },
    {
        "id": "b0986a60.bb0dc8",
        "type": "inject",
        "z": "1cfb3818.d1db88",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 140,
        "y": 240,
        "wires": [
            [
                "24022979.fd4636"
            ]
        ]
    },
    {
        "id": "24022979.fd4636",
        "type": "function",
        "z": "1cfb3818.d1db88",
        "name": "process farms",
        "func": "const farms = flow.get(\"farms\") || [];\nfarms.forEach(farm => {\n    const res = { \"farmId\": farm.farmId };\n    node.send({\"payload\": {farm, res}});\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 160,
        "y": 300,
        "wires": [
            [
                "e1cc975.b78f668"
            ]
        ]
    },
    {
        "id": "907c6c0a.3c4e3",
        "type": "debug",
        "z": "1cfb3818.d1db88",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 550,
        "y": 480,
        "wires": []
    },
    {
        "id": "e1cc975.b78f668",
        "type": "function",
        "z": "1cfb3818.d1db88",
        "name": "process ranches",
        "func": "const ranches = msg.payload.farm.ranches;\nconst fres = msg.payload.res;\nranches.forEach(ranch => {\n    const res = { ...fres, \"ranchId\": ranch.ranchId };\n    node.send({\"payload\": {ranch, res}});\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 200,
        "y": 360,
        "wires": [
            [
                "54e21395.b1119c"
            ]
        ]
    },
    {
        "id": "54e21395.b1119c",
        "type": "function",
        "z": "1cfb3818.d1db88",
        "name": "process clusters",
        "func": "const clusters = msg.payload.ranch.clusters;\nconst rres = msg.payload.res;\nclusters.forEach(cluster => {\n    const res = { ...rres, \"clusterId\": cluster.clusterId };\n    node.send({\"payload\": {cluster, res}});\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 240,
        "y": 420,
        "wires": [
            [
                "346ff8dd.edaea8"
            ]
        ]
    },
    {
        "id": "346ff8dd.edaea8",
        "type": "function",
        "z": "1cfb3818.d1db88",
        "name": "process sensors",
        "func": "const sensors = msg.payload.cluster.sensors;\nconst cres = msg.payload.res;\nsensors.forEach(sensor => {\n    const res = { \n        ...cres,\n        \"sensorId\": sensor.sensorId,\n        \"type\": sensor.type,\n        \"status\": sensor.status\n    };\n    node.send({\"payload\": {sensor, res}});\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 480,
        "wires": [
            [
                "502a9261.fe682c"
            ]
        ]
    },
    {
        "id": "502a9261.fe682c",
        "type": "function",
        "z": "1cfb3818.d1db88",
        "name": "process each sensor",
        "func": "const sensor = msg.payload.sensor;\nconst sres = msg.payload.res;\nif (sres.status === \"ON\") {\n    if (sres.type === \"temperature\") {\n        sres.timestamp = new Date();\n        sres.value = Math.random();\n        const hour = sres.timestamp.getHours();\n        if (hour >= 7 && hour <= 12) {\n            sres.value = Math.floor(Math.random() * 4) + 40;\n        }\n        if (hour > 12 && hour <= 18) {\n            sres.value = Math.floor((Math.random() * 5) + 44);\n        }\n        if (hour > 18 && hour <= 23) {\n            sres.value = Math.floor((Math.random() * 4) + 35);\n        }\n    }\n    if (sres.type === \"humidity\") {\n        sres.timestamp = new Date();\n        sres.value = Math.random();\n        const hour = sres.timestamp.getHours();\n        if (hour >= 7 && hour <= 12) {\n            sres.value = Math.floor(Math.random() * 6) + 70;\n        }\n        if (hour > 12 && hour <= 18) {\n            sres.value = Math.floor((Math.random() * 6) + 60);\n        }\n        if (hour > 18 && hour <= 23) {\n            sres.value = Math.floor((Math.random() * 6) + 65);\n        }\n    }\n    if (sres.type === \"windspeed\") {\n        sres.timestamp = new Date();\n        sres.value = Math.random();\n        sres.value = Math.floor((Math.random() * 5) + 8);\n    }\n    if (sres.type === \"rain\") {\n        sres.timestamp = new Date();\n        sres.value = Math.random();\n        const hour = sres.timestamp.getHours();\n        sres.value = Math.floor(Math.random() * 3) + 0;\n    }\n    if (sres.type === \"moisture\") {\n        sres.timestamp = new Date();\n        sres.value = Math.floor((Math.random() * 2) + 5);\n    }\nnode.send({\n    \"payload\": sres\n});\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 540,
        "wires": [
            [
                "907c6c0a.3c4e3"
            ]
        ]
    },
    {
        "id": "44662e41.02876",
        "type": "inject",
        "z": "3a44a793.d4f7d8",
        "name": "clear chart",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 120,
        "y": 220,
        "wires": [
            [
                "e63b89e5.084458"
            ]
        ]
    },
    {
        "id": "e63b89e5.084458",
        "type": "function",
        "z": "3a44a793.d4f7d8",
        "name": "empty array",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "824ca240.a05d4",
        "type": "inject",
        "z": "3a44a793.d4f7d8",
        "name": "trigger",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 110,
        "y": 300,
        "wires": [
            [
                "e5550902.5ecc68"
            ]
        ]
    },
    {
        "id": "e5550902.5ecc68",
        "type": "function",
        "z": "3a44a793.d4f7d8",
        "name": "custom data",
        "func": "msg.payload = [{\n    \"series\": [\"A\"],\n    \"data\": [\n        [{\n                \"x\": new Date(),\n                \"y\": Math.round((Math.random() * 10) % 10)\n            },\n            {\n                \"x\": new Date(new Date().getTime() + 3600 * 1000),\n                \"y\": Math.round((Math.random() * 10) % 10)\n            },\n            {\n                \"x\": new Date(new Date().getTime() + 3600 * 2000),\n                \"y\": Math.round((Math.random() * 10) % 10)\n            },\n            {\n                \"x\": new Date(new Date().getTime() + 3600 * 3000),\n                \"y\": Math.round((Math.random() * 10) % 10)\n            },\n            {\n                \"x\": new Date(new Date().getTime() + 3600 * 4000),\n                \"y\": Math.round((Math.random() * 10) % 10)\n            },\n            {\n                \"x\": new Date(new Date().getTime() + 3600 * 5000),\n                \"y\": Math.round((Math.random() * 10) % 10)\n            },\n        ]\n    ],\n    \"labels\": [\"\"]\n}];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "54004066.dfb0e",
        "type": "cassandra",
        "z": "3a44a793.d4f7d8",
        "mydb": "2a4a094f.663ed6",
        "name": "",
        "x": 450,
        "y": 380,
        "wires": [
            [
                "3309a705.866408"
            ]
        ]
    },
    {
        "id": "3309a705.866408",
        "type": "debug",
        "z": "3a44a793.d4f7d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 650,
        "y": 380,
        "wires": []
    },
    {
        "id": "110e34ec.feb1cb",
        "type": "function",
        "z": "3a44a793.d4f7d8",
        "name": "ReadQuery",
        "func": "msg.topic = \"select * from cloud_sensor_data.sensordata where farm_id='1' and ranch_id='2' and clusterid='2' and sensorid='1'\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 250,
        "y": 380,
        "wires": [
            [
                "54004066.dfb0e"
            ]
        ]
    },
    {
        "id": "91222966.ba34e8",
        "type": "inject",
        "z": "3a44a793.d4f7d8",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "110e34ec.feb1cb"
            ]
        ]
    },
    {
        "id": "9e8bd14.7fd893",
        "type": "http response",
        "z": "85b67cb7.2993c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 430,
        "y": 100,
        "wires": []
    },
    {
        "id": "8b640027.d24c6",
        "type": "function",
        "z": "85b67cb7.2993c",
        "name": "process get farm",
        "func": "//node.warn(flow.get(\"farms\"))\nconst farms = flow.get(\"farms\") || [];\nmsg.payload = farms;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 100,
        "wires": [
            [
                "9e8bd14.7fd893"
            ]
        ]
    },
    {
        "id": "e9ba90d6.831e7",
        "type": "http in",
        "z": "85b67cb7.2993c",
        "name": "GET /farms",
        "url": "/farms",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 100,
        "wires": [
            [
                "8b640027.d24c6"
            ]
        ]
    },
    {
        "id": "65976e0f.2e07e",
        "type": "http in",
        "z": "85b67cb7.2993c",
        "name": "POST /farms",
        "url": "/farms",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 60,
        "wires": [
            [
                "8b0f1915.34e5a8"
            ]
        ]
    },
    {
        "id": "8b0f1915.34e5a8",
        "type": "function",
        "z": "85b67cb7.2993c",
        "name": "process add farm",
        "func": "const newFarm = msg.req.body.farm;\nconst farms = flow.get(\"farms\") || [];\nfarms.push(newFarm);\nflow.set(\"farms\", farms);\nmsg.payload = farms;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 60,
        "wires": [
            [
                "3430a18c.8e5d0e",
                "98a34ec4.739a4"
            ]
        ]
    },
    {
        "id": "3430a18c.8e5d0e",
        "type": "http response",
        "z": "85b67cb7.2993c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 410,
        "y": 20,
        "wires": []
    },
    {
        "id": "ce958ce3.86424",
        "type": "debug",
        "z": "85b67cb7.2993c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 710,
        "y": 100,
        "wires": []
    },
    {
        "id": "98a34ec4.739a4",
        "type": "function",
        "z": "85b67cb7.2993c",
        "name": "BuildFarmInsertQuery",
        "func": "let farms = msg.req.body.farm;\n\n// for (var i = 0; i < farms.length; i++){\n    // node.error(farms[i]);\n    const farmid = farms.farmId;\n    const farmerid = farms.farmerId;\n    // node.error(farmid);\n    const ranches = farms.ranches;\n    ranches.forEach(ranch => {\n        const ranchid = ranch.ranchId;\n        const clusters = ranch.clusters;\n        clusters.forEach(cluster => {\n            const clusterid = cluster.clusterId\n            const sensors = cluster.sensors;\n            const arr = [];\n            sensors.forEach(sensor => {\n                const sensorid = sensor.sensorId;\n                const sensortype = sensor.type;\n                let buildQuery =\"Insert into network.Farmer_Profile(farmer_id,farm_id,ranch_id,cluster_id,sensor_id,sensor_type) values ('\"+farmerid+\"','\"+farmid+\"','\"+ranchid+\"','\"+clusterid+\"','\"+sensorid+\"','\"+sensortype+\"')\";\n                // let buildQuery =\"select * from cloud_sensor_data.farmer_profile where farm_id='\"+farmid+\"' and ranch_id='\"+ranchid+\"' and clusterid='\"+clusterid+\"' and sensorid='\"+sensorid+\"'\";\n                node.error(buildQuery);\n                arr.push(buildQuery);\n            });\n             node.send({\n            \"payload\": arr\n    });\n        });\n    });\n// }\n \n// msg.topic = \n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 560,
        "y": 60,
        "wires": [
            [
                "e6427361.02f28"
            ]
        ]
    },
    {
        "id": "e6427361.02f28",
        "type": "function",
        "z": "85b67cb7.2993c",
        "name": "InsertQuery",
        "func": "let query = msg.payload;\n\nfor(var i=0 ; i < query.length ;i++) {\n    msg.topic = query[i];\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 750,
        "y": 60,
        "wires": [
            [
                "ce958ce3.86424"
            ]
        ]
    },
    {
        "id": "db34f34b.d0ae5",
        "type": "ui_gauge",
        "z": "3a44a793.d4f7d8",
        "name": "",
        "group": "ab2948ea.420c08",
        "order": 2,
        "width": "3",
        "height": "3",
        "gtype": "donut",
        "title": "Sensor 1",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 860,
        "y": 400,
        "wires": []
    },
    {
        "id": "6ce202a3.bc55fc",
        "type": "function",
        "z": "3a44a793.d4f7d8",
        "name": "Parser",
        "func": "let arr = JSON.parse(msg.payload);\narr.forEach(sensor => {\n    const res = {\n        \"topic\": sensor.sensorId,\n        \"payload\": sensor.value,\n        \"series\": sensor.sensorId,\n    };\n    if(sensor.type === \"temperature\") {\n        node.send([res,null,null,null,null]);\n    }\n    if(sensor.type === \"humidity\") {\n        node.send([null,res,null,null,null]);\n    }\n    if(sensor.type === \"windSpeed\") {\n       node.send([null,null,res,null,null]);\n    }\n    if(sensor.type === \"rain\") {\n      node.send([null,null,null,res,null]);\n    }\n    if(sensor.type === \"soilMoisture\") {\n       node.send([null,null,null,null,res]);\n    }\n    \n    \n});",
        "outputs": 5,
        "noerr": 0,
        "x": 650,
        "y": 220,
        "wires": [
            [
                "5da201d5.8bb59"
            ],
            [
                "cfa40974.7983a8"
            ],
            [
                "d2afc805.493398"
            ],
            [
                "a72f6842.6d1a18"
            ],
            [
                "3c0a1c1b.580594"
            ]
        ]
    },
    {
        "id": "5da201d5.8bb59",
        "type": "ui_chart",
        "z": "3a44a793.d4f7d8",
        "name": "",
        "group": "e81d613b.b7137",
        "order": 1,
        "width": "6",
        "height": "3",
        "label": "Temperature",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Sensor",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 2,
        "x": 870,
        "y": 200,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "3c0a1c1b.580594",
        "type": "ui_chart",
        "z": "3a44a793.d4f7d8",
        "name": "",
        "group": "e81d613b.b7137",
        "order": 3,
        "width": "6",
        "height": "3",
        "label": "Soil Moisture",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 2,
        "x": 870,
        "y": 360,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "8c84c7da.cd50c8",
        "type": "ui_gauge",
        "z": "3a44a793.d4f7d8",
        "name": "",
        "group": "ab2948ea.420c08",
        "order": 2,
        "width": "3",
        "height": "3",
        "gtype": "donut",
        "title": "Sensor 2",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 860,
        "y": 440,
        "wires": []
    },
    {
        "id": "5a5f62.a95f20a",
        "type": "ui_gauge",
        "z": "3a44a793.d4f7d8",
        "name": "",
        "group": "ab2948ea.420c08",
        "order": 2,
        "width": "3",
        "height": "3",
        "gtype": "donut",
        "title": "Sensor 3",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 860,
        "y": 480,
        "wires": []
    },
    {
        "id": "84a89611.67e8e8",
        "type": "ui_template",
        "z": "3a44a793.d4f7d8",
        "group": "36df1de9.d7e1b2",
        "name": "",
        "order": 3,
        "width": "6",
        "height": "3",
        "format": "<iframe src=\"/worldmap\"></iframe>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "templateScope": "local",
        "x": 860,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "548ac7a1.9c0e48",
        "type": "mqtt in",
        "z": "3a44a793.d4f7d8",
        "name": "/clustertopic",
        "topic": "/clustertopic",
        "qos": "2",
        "broker": "10b63f1b.6f9391",
        "x": 510,
        "y": 220,
        "wires": [
            [
                "6ce202a3.bc55fc"
            ]
        ]
    },
    {
        "id": "d2afc805.493398",
        "type": "ui_chart",
        "z": "3a44a793.d4f7d8",
        "name": "",
        "group": "e81d613b.b7137",
        "order": 3,
        "width": "6",
        "height": "3",
        "label": "WindSpeed",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 2,
        "x": 870,
        "y": 280,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a72f6842.6d1a18",
        "type": "ui_chart",
        "z": "3a44a793.d4f7d8",
        "name": "",
        "group": "e81d613b.b7137",
        "order": 3,
        "width": "6",
        "height": "3",
        "label": "Rain",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 2,
        "x": 850,
        "y": 320,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "cfa40974.7983a8",
        "type": "ui_chart",
        "z": "3a44a793.d4f7d8",
        "name": "",
        "group": "e81d613b.b7137",
        "order": 3,
        "width": "6",
        "height": "3",
        "label": "Humidity",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 2,
        "x": 860,
        "y": 240,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d1807372.44cbf",
        "type": "function",
        "z": "3a44a793.d4f7d8",
        "name": "Set-up name-value map",
        "func": "// This mapping file uses {\"name\":\"value\"} pairs to pre-fill the drop-down widget in the dashboard\nmsg.payload = \n[ \n    {\"[Remove all]\":\"delete\"},\n    {\"Farm\":\"farm/\"},\n    {\"Ranch\":\"ranch/\"}, \n    {\"Cluster\":\"cluster/\"},\n\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 250,
        "y": 540,
        "wires": [
            [
                "4ddf46a8.a887b8"
            ]
        ]
    },
    {
        "id": "4ddf46a8.a887b8",
        "type": "change",
        "z": "3a44a793.d4f7d8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 540,
        "wires": [
            [
                "17773550.2b37bb"
            ]
        ]
    },
    {
        "id": "fd097cc2.af04d",
        "type": "inject",
        "z": "3a44a793.d4f7d8",
        "name": "Trigger",
        "topic": "",
        "payload": "0",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 50,
        "y": 540,
        "wires": [
            [
                "d1807372.44cbf"
            ]
        ]
    },
    {
        "id": "17773550.2b37bb",
        "type": "ui_dropdown",
        "z": "3a44a793.d4f7d8",
        "name": "Data source",
        "label": "",
        "tooltip": "",
        "place": "",
        "group": "7d67a0fd.2ad08",
        "order": 1,
        "width": "4",
        "height": "1",
        "passthru": false,
        "options": [
            {
                "label": "Farm",
                "value": "Farm",
                "type": "str"
            },
            {
                "label": "Ranch",
                "value": "Ranch",
                "type": "str"
            },
            {
                "label": "Cluster",
                "value": "Cluster",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "datasource",
        "x": 570,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "2a4ca781.3ae9b8",
        "type": "cassandra",
        "z": "3a44a793.d4f7d8",
        "mydb": "2a4a094f.663ed6",
        "name": "",
        "x": 490,
        "y": 680,
        "wires": [
            [
                "43c6c2fe.b6d67c"
            ]
        ]
    },
    {
        "id": "43c6c2fe.b6d67c",
        "type": "debug",
        "z": "3a44a793.d4f7d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 690,
        "y": 680,
        "wires": []
    },
    {
        "id": "53cf7675.368038",
        "type": "function",
        "z": "3a44a793.d4f7d8",
        "name": "ReadQuery",
        "func": "// msg.topic = \"select * from cloud_sensor_data.sensordata \" ;\nmsg.topic = \"select * from Network_Data.Cluster_Profile \" ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 680,
        "wires": [
            [
                "2a4ca781.3ae9b8"
            ]
        ]
    },
    {
        "id": "ace59d7a.2b5e2",
        "type": "inject",
        "z": "3a44a793.d4f7d8",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "x": 140,
        "y": 680,
        "wires": [
            [
                "53cf7675.368038"
            ]
        ]
    },
    {
        "id": "b250de9.140da2",
        "type": "function",
        "z": "3a44a793.d4f7d8",
        "name": "InsertSensorColletedDataQuery",
        "func": "\n    try {\n    \n    var i;\n    var m = \"BEGIN BATCH \";\n    var stmt;\n    for (i = 0; i < msg.payload.length; i++) {\n        var a;\n        a= msg.payload[i];\n     \n       // m += \"INSERT INTO sample.Sensor (farm_id,data_dump_dt,ranch_id) VALUES ('\"+a.farmId+\"','\"+a.timestamp+\"','\"+a.ranchId+\"');\\n\";\n       m += \"INSERT INTO cloud_sensor_data.SensorData (Farm_id,Ranch_Id,clusterId,sensorId,sensor_type,status,sensor_value,data_dump_dt) VALUES ('\"+a.farmId+\"','\"+a.ranchId+\"','\"+a.clusterId+\"','\"+a.sensorId+\"','\"+a.type+\"','\"+a.status+\"','\"+a.value+\"','\"+a.timestamp+\"');\\n\";\n    //   let sensorDataQuery =\"Insert into cloud_sensor_data.SensorData(farm_id,ranch_id,cluster_id,sensor_id,sensor_type,sensor_data,sensor_status,data_dump_dt) values ('\"+a.farmid+\"','\"+a.ranchid+\"','\"+a.clusterid+\"','\"+a.sensorid+\"','\"+a.sensortype+\"','\"+a.sensorvalue+\"','\"+a.sensorstatus+\"','\"+a.timestamp+\"');\\n\";\n    }\n    \n    m += \"APPLY BATCH;\";\n    msg.topic = m;\n    msg.payload = null;\n    node.warn(msg);\n    \n} catch (e) {\n    node.error(`error in json parse: ${e}`);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 760,
        "wires": [
            [
                "2412cbc0.b767a4"
            ]
        ]
    },
    {
        "id": "f0da06ae.44b1a8",
        "type": "mqtt in",
        "z": "3a44a793.d4f7d8",
        "name": "/clustertopic",
        "topic": "/clustertopic",
        "qos": "2",
        "broker": "10b63f1b.6f9391",
        "x": 110,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "2412cbc0.b767a4",
        "type": "cassandra",
        "z": "3a44a793.d4f7d8",
        "mydb": "224b7d26.67ca32",
        "name": "Network_Data",
        "x": 420,
        "y": 800,
        "wires": [
            [
                "35c559c2.e63816"
            ]
        ]
    },
    {
        "id": "35c559c2.e63816",
        "type": "debug",
        "z": "3a44a793.d4f7d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 470,
        "y": 840,
        "wires": []
    },
    {
        "id": "6db4d4f9.58e7ec",
        "type": "debug",
        "z": "85b67cb7.2993c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 510,
        "y": 480,
        "wires": []
    },
    {
        "id": "d9da8d03.7c7da",
        "type": "mqtt in",
        "z": "85b67cb7.2993c",
        "name": "/clustertopic",
        "topic": "/clustertopic",
        "qos": "2",
        "broker": "10b63f1b.6f9391",
        "x": 190,
        "y": 480,
        "wires": [
            [
                "f91d8e9a.edfd3"
            ]
        ]
    },
    {
        "id": "f91d8e9a.edfd3",
        "type": "function",
        "z": "85b67cb7.2993c",
        "name": "json parse",
        "func": "try {\n    msg.payload = JSON.parse(msg.payload);\n  // msg.payload  = msg.payload.cloud[0];\n \n} catch (e) {\n    node.error(`error in json parse: ${e}`);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 480,
        "wires": [
            [
                "6db4d4f9.58e7ec"
            ]
        ]
    },
    {
        "id": "19b5f273.cc0d6e",
        "type": "inject",
        "z": "3736a922.aa8396",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 100,
        "y": 40,
        "wires": [
            [
                "bcc0f0b9.15371"
            ]
        ]
    },
    {
        "id": "bcc0f0b9.15371",
        "type": "function",
        "z": "3736a922.aa8396",
        "name": "process farms",
        "func": "\nconst farms = flow.get(\"farms\") || [];\nfarms.forEach(farm => {\n    const res = { \"farmId\": farm.farmId };\n   // const res1= {\"farmerId\": farm.farmerId};\n    node.send({\"payload\": {farm, res}});\n});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 140,
        "y": 80,
        "wires": [
            [
                "aeba4417.ef6e48"
            ]
        ]
    },
    {
        "id": "aeba4417.ef6e48",
        "type": "function",
        "z": "3736a922.aa8396",
        "name": "process ranches",
        "func": "const ranches = msg.payload.farm.ranches;\nconst fres = msg.payload.res;\nranches.forEach(ranch => {\n    const res = { ...fres, \"ranchId\": ranch.ranchId };\n    node.send({\"payload\": {ranch, res}});\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 120,
        "wires": [
            [
                "9d6a331e.83b31"
            ]
        ]
    },
    {
        "id": "9d6a331e.83b31",
        "type": "function",
        "z": "3736a922.aa8396",
        "name": "process clusters",
        "func": "const clusters = msg.payload.ranch.clusters;\nconst rres = msg.payload.res;\nclusters.forEach(cluster => {\n    const cres = {\n        ...rres,\n        \"clusterId\": cluster.clusterId\n    };\n    const sensors = cluster.sensors;\n    const arr = [];\n    sensors.forEach(sensor => {\n    var typ  = sensor.type;\n    var val =   sensor.value;\n    arr.push(typ);\n    arr.push(val);\n    });\n    node.send({\n        \"payload\": arr\n    });\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 240,
        "y": 160,
        "wires": [
            [
                "ccd603fe.40047"
            ]
        ]
    },
    {
        "id": "ccd603fe.40047",
        "type": "mqtt out",
        "z": "3736a922.aa8396",
        "name": "/clustertopic",
        "topic": "/clustertopic",
        "qos": "1",
        "retain": "",
        "broker": "10b63f1b.6f9391",
        "x": 410,
        "y": 160,
        "wires": []
    },
    {
        "id": "5feb8a9.7f42874",
        "type": "cassandra",
        "z": "3736a922.aa8396",
        "mydb": "2a4a094f.663ed6",
        "name": "cloud_sensor_data",
        "x": 330,
        "y": 320,
        "wires": [
            [
                "82d56532.3274f8"
            ]
        ]
    },
    {
        "id": "1ff175ae.93635a",
        "type": "function",
        "z": "3736a922.aa8396",
        "name": "json parse",
        "func": "msg.topic = \"select * from cloud_sensor_data.sensordata where farm_id='10'\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 150,
        "y": 320,
        "wires": [
            [
                "5feb8a9.7f42874"
            ]
        ]
    },
    {
        "id": "82d56532.3274f8",
        "type": "debug",
        "z": "3736a922.aa8396",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 370,
        "y": 360,
        "wires": []
    },
    {
        "id": "a7a1f675.63aeb8",
        "type": "inject",
        "z": "3736a922.aa8396",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 120,
        "y": 280,
        "wires": [
            [
                "1ff175ae.93635a"
            ]
        ]
    },
    {
        "id": "fcfac7b3.1f91f8",
        "type": "cassandra",
        "z": "3736a922.aa8396",
        "mydb": "2a4a094f.663ed6",
        "name": "cloud_sensor_data",
        "x": 650,
        "y": 220,
        "wires": [
            [
                "9abeb1d5.a2f53"
            ]
        ]
    },
    {
        "id": "811f3fb5.07288",
        "type": "function",
        "z": "3736a922.aa8396",
        "name": "InsertGeneraterDataInDB",
        "func": "try {\n    \n    var i;\n    var m = \"BEGIN BATCH \";\n    var stmt;\n   \n    for (i = 0; i < msg.payload.length; i++) {\n        var a;\n        a= msg.payload[i];\n       // m += \"INSERT INTO cloud_sensor_data.sensordata (farm_id,ranch_id,cluster_id,sensor_id,sensor_type,sensor_status,sensor_data,data_dump_dt) VALUES ('\"+a.farmId+\"','\"+a.ranchId+\"','\"+a.clusterId+\"','\"+a.sensorId+\"','\"+a.type+\"','\"+a.status+\"','\"+a.value+\"','\"+a.timestamp+\"');\\n\";\n       m += \"INSERT INTO cloud_sensor_data.sensordata (farm_id,ranch_id,cluster_id,sensor_id,sensor_type,sensor_status,sensor_data,data_dump_dt) VALUES ('\"+a.farmId+\"','\"+a.ranchId+\"','\"+a.clusterId+\"','\"+a.sensorId+\"','\"+a.type+\"','\"+a.status+\"','\"+a.value+\"','\"+a.timestamp+\"');\\n\";\n     //  m += \"INSERT INTO cloud_sensor_data.sensordata (farmer_id,farm_id,ranch_id,cluster_id,sensor_id,sensor_type,sensor_status,sensor_data,data_dump_dt) VALUES ('farmer3','\"+a.farmId+\"','\"+a.ranchId+\"','\"+a.clusterId+\"','\"+a.sensorId+\"','\"+a.type+\"','\"+a.status+\"','\"+a.value+\"','\"+a.timestamp+\"');\\n\";\n       \n    }\n    \n    m += \"APPLY BATCH;\";\n    msg.topic = m;\n    msg.payload = null;\n    // node.warn(msg);\n    \n} catch (e) {\n    node.error(`error in json parse: ${e}`);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 220,
        "wires": [
            [
                "fcfac7b3.1f91f8"
            ]
        ]
    },
    {
        "id": "882a31ec.17c44",
        "type": "json",
        "z": "3736a922.aa8396",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 230,
        "y": 220,
        "wires": [
            [
                "811f3fb5.07288"
            ]
        ]
    },
    {
        "id": "f80a61e2.86cba",
        "type": "mqtt in",
        "z": "3736a922.aa8396",
        "name": "/clustertopic",
        "topic": "/clustertopic",
        "qos": "2",
        "broker": "933f8f51.89678",
        "x": 90,
        "y": 220,
        "wires": [
            [
                "882a31ec.17c44"
            ]
        ]
    },
    {
        "id": "9abeb1d5.a2f53",
        "type": "debug",
        "z": "3736a922.aa8396",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 610,
        "y": 260,
        "wires": []
    },
    {
        "id": "d222d761.5a4978",
        "type": "inject",
        "z": "85b67cb7.2993c",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "x": 120,
        "y": 320,
        "wires": [
            [
                "62fe0455.618f2c"
            ]
        ]
    },
    {
        "id": "62fe0455.618f2c",
        "type": "function",
        "z": "85b67cb7.2993c",
        "name": "process farms",
        "func": "\nconst farms = flow.get(\"farms\") || [];\nfarms.forEach(farm => {\n    const res = { \"farmId\": farm.farmId };\n    node.send({\"payload\": {farm, res}});\n});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 140,
        "y": 360,
        "wires": [
            [
                "6e27ebbe.889a04"
            ]
        ]
    },
    {
        "id": "6e27ebbe.889a04",
        "type": "function",
        "z": "85b67cb7.2993c",
        "name": "process ranches",
        "func": "const ranches = msg.payload.farm.ranches;\nconst fres = msg.payload.res;\nranches.forEach(ranch => {\n    const res = { ...fres, \"ranchId\": ranch.ranchId };\n    node.send({\"payload\": {ranch, res}});\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 160,
        "y": 400,
        "wires": [
            [
                "8382551f.33f6a8"
            ]
        ]
    },
    {
        "id": "8382551f.33f6a8",
        "type": "function",
        "z": "85b67cb7.2993c",
        "name": "process clusters",
        "func": "const clusters = msg.payload.ranch.clusters;\nconst rres = msg.payload.res;\nclusters.forEach(cluster => {\n    const cres = {\n        ...rres,\n        \"clusterId\": cluster.clusterId\n    };\n    const sensors = cluster.sensors;\n    const arr = [];\n    sensors.forEach(sensor => {\n        const res = {\n            ...cres,\n            \"sensorId\": sensor.sensorId,\n            \"type\": sensor.type,\n            \"status\": sensor.status\n        };\n        if (res.status === \"ON\") {\n            if (res.type === \"temperature\") {\n                res.timestamp = new Date();\n                res.value = Math.random();\n                const hour = res.timestamp.getHours();\n                if (hour >= 7 && hour <= 12) {\n                    res.value = Math.floor(Math.random() * 4) + 40;\n                }\n                if (hour > 12 && hour <= 18) {\n                    res.value = Math.floor((Math.random() * 5) + 44);\n                }\n                if (hour > 18 && hour <= 23) {\n                    res.value = Math.floor((Math.random() * 4) + 35);\n                }\n            }\n            if (res.type === \"humidity\") {\n                res.timestamp = new Date();\n                res.value = Math.random();\n                const hour = res.timestamp.getHours();\n                if (hour >= 7 && hour <= 12) {\n                    res.value = Math.floor(Math.random() * 6) + 70;\n                }\n                if (hour > 12 && hour <= 18) {\n                    res.value = Math.floor((Math.random() * 6) + 60);\n                }\n                if (hour > 18 && hour <= 23) {\n                    res.value = Math.floor((Math.random() * 6) + 65);\n                }\n            }\n            if (res.type === \"windSpeed\") {\n                res.timestamp = new Date();\n                res.value = Math.random();\n                res.value = Math.floor((Math.random() * 5) + 8);\n            }\n            if (res.type === \"rain\") {\n                res.timestamp = new Date();\n                res.value = Math.random();\n                //const hour = sres.timestamp.getHours();\n                res.value = Math.floor(Math.random() * 3) + 0;\n            }\n            if (res.type === \"soilMoisture\") {\n                res.timestamp = new Date();\n                res.value = Math.floor((Math.random() * 2) + 5);\n            }\n            arr.push(res);\n        }\n    });\n    node.send({\n        \"payload\": arr\n    });\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 200,
        "y": 440,
        "wires": [
            [
                "83428ade.4b4288"
            ]
        ]
    },
    {
        "id": "83428ade.4b4288",
        "type": "mqtt out",
        "z": "85b67cb7.2993c",
        "name": "/clustertopic",
        "topic": "/clustertopic",
        "qos": "1",
        "retain": "",
        "broker": "10b63f1b.6f9391",
        "x": 370,
        "y": 440,
        "wires": []
    },
    {
        "id": "12155026.9909f",
        "type": "http in",
        "z": "85b67cb7.2993c",
        "name": "GET /sensors",
        "url": "/sensors",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 200,
        "wires": [
            [
                "34395dde.bfc6d2"
            ]
        ]
    },
    {
        "id": "c8d660b3.3b0f6",
        "type": "http response",
        "z": "85b67cb7.2993c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 480,
        "y": 200,
        "wires": []
    },
    {
        "id": "34395dde.bfc6d2",
        "type": "function",
        "z": "85b67cb7.2993c",
        "name": "process nodes",
        "func": "const farms = flow.get(\"farms\") || [];\nconst query = msg.req.query;\n\n// const query = {farmerId:\"farmer3\", farmId:10, ranchId:1, clusterId:1}\n// const farms = [{\"farmId\":\"10\",\"farmerId\":\"farmer3\",\"ranches\":[{\"ranchId\":\"1\",\"clusters\":[{\"clusterId\":\"1\",\"sensors\":[{\"sensorId\":\"1\",\"type\":\"temperature\",\"status\":\"ON\"},{\"sensorId\":\"2\",\"type\":\"soil\",\"status\":\"ON\"}]},{\"clusterId\":\"2\",\"sensors\":[{\"sensorId\":\"1\",\"type\":\"temperature\",\"status\":\"ON\"},{\"sensorId\":\"2\",\"type\":\"soil\",\"status\":\"ON\"}]}]},{\"ranchId\":\"2\",\"clusters\":[{\"clusterId\":\"1\",\"sensors\":[{\"sensorId\":\"1\",\"type\":\"temperature\",\"status\":\"ON\"},{\"sensorId\":\"2\",\"type\":\"soil\",\"status\":\"ON\"}]},{\"clusterId\":\"2\",\"sensors\":[{\"sensorId\":\"1\",\"type\":\"temperature\",\"status\":\"ON\"},{\"sensorId\":\"2\",\"type\":\"soil\",\"status\":\"ON\"}]}]}]},{\"farmId\":\"11\",\"farmerId\":\"farmer3\",\"ranches\":[{\"ranchId\":\"2\",\"clusters\":[{\"clusterId\":\"2\",\"sensors\":[{\"sensorId\":\"1\",\"type\":\"temperature\",\"status\":\"ON\"},{\"sensorId\":\"2\",\"type\":\"soil\",\"status\":\"ON\"}]}]}]},{\"farmId\":\"11\",\"farmerId\":\"farmer31\",\"ranches\":[{\"ranchId\":\"2\",\"clusters\":[{\"clusterId\":\"2\",\"sensors\":[{\"sensorId\":\"1\",\"type\":\"temperature\",\"status\":\"ON\"},{\"sensorId\":\"2\",\"type\":\"soil\",\"status\":\"ON\"}]}]}]}];\n\nconst getSensor = (cluster, farmerId, farmId, ranchId, clusterId) => {\n    // return nothing if cluster is falsy\n    if (!cluster) return [];\n    if (query.sensorId) {\n        let ret = [];\n        cluster.sensors.forEach(sensor => {\n            if (sensor.sensorId == query.sensorId) {\n                ret.push({\n                    farmerId,\n                    farmId,\n                    ranchId,\n                    clusterId,\n                    ...sensor\n                });\n            }\n        });\n        // document.writeln(JSON.stringify(ret))\n        msg.payload = ret;\n        node.send(msg);\n    } else {\n        let sensors = [];\n        let ret = {\n            farmerId,\n            farmId,\n            ranchId,\n            clusterId\n        };\n        cluster.sensors.forEach(sensor => {\n            ret = {\n                ...ret,\n                ...sensor\n            };\n            sensors.push(ret);\n        });\n        // document.writeln(JSON.stringify(sensors));\n        msg.payload = sensors;\n        node.send(msg);\n    }\n};\n\nconst getCluster = (ranch, farmerId, farmId, ranchId) => {\n    // return nothing if ranch is falsy\n    if (!ranch) return [];\n    if (query.clusterId) {\n        let ret = null;\n        ranch.clusters.some(cluster => {\n            if (cluster.clusterId == query.clusterId) {\n                ret = cluster;\n                return true;\n            }\n            return false;\n        });\n        if (ret) {\n            getSensor(ret, farmerId, farmId, ranchId, query.clusterId);\n        } else {\n            // cluster not found\n            // code to return nothing\n            // document.writeln(JSON.stringify([]));\n            msg.payload = [];\n            node.send(msg);\n        }\n    } else {\n        // code to return ALL nodes in this ranch\n        let sensors = [];\n        let ret = {\n            farmerId,\n            farmId,\n            ranchId\n        };\n        ranch.clusters.forEach(cluster => {\n            ret = {\n                ...ret,\n                clusterId: cluster.clusterId\n            };\n            cluster.sensors.forEach(sensor => {\n                ret = {\n                    ...ret,\n                    ...sensor\n                };\n                sensors.push(ret);\n            });\n        });\n        // document.writeln(JSON.stringify(sensors));\n        msg.payload = sensors;\n        node.send(msg);\n    }\n}\n\nconst getRanch = (farm, farmerId, farmId) => {\n    // return nothing if farm is falsy\n    if (!farm) return [];\n    if (query.ranchId) {\n        let ret = null;\n        farm.ranches.some(ranch => {\n            if (ranch.ranchId == query.ranchId) {\n                ret = ranch;\n                return true;\n            }\n            return false;\n        });\n        if (ret) {\n            getCluster(ret, farmerId, farmId, query.ranchId);\n        } else {\n            // ranch not found\n            // code to return nothing\n            // document.writeln(JSON.stringify([]));\n            msg.payload = [];\n            node.send(msg);\n        }\n    } else {\n        // code to return ALL nodes for this farm\n        let sensors = [];\n        let ret = {\n            farmerId,\n            farmId\n        };\n        farm.ranches.forEach(ranch => {\n            ret = {\n                ...ret,\n                ranchId: ranch.ranchId\n            };\n            ranch.clusters.forEach(cluster => {\n                ret = {\n                    ...ret,\n                    clusterId: cluster.clusterId\n                };\n                cluster.sensors.forEach(sensor => {\n                    ret = {\n                        ...ret,\n                        ...sensor\n                    };\n                    sensors.push(ret);\n                });\n            });\n        });\n        // document.writeln(JSON.stringify(sensors));\n        msg.payload = sensors;\n        node.send(msg);\n    }\n};\n\nconst getFarm = (farms, farmerId) => {\n    // return nothing if we could not find any farms\n    // for this farmer\n    if (farms.length === 0) return [];\n    if (query.farmId) {\n        let ret = null;\n        farms.some(farm => {\n            if (farm.farmId == query.farmId) {\n                ret = farm;\n                return true;\n            }\n            return false;\n        });\n        if (ret) {\n            getRanch(ret, farmerId, query.farmId);\n        }\n        // if we don't find a farm with that farmId\n        // return noting\n        else {\n            // code to return nothing\n            // document.writeln(JSON.stringify([]));\n            msg.payload = [];\n            node.send(msg);\n        }\n    } else {\n        // code to return all nodes in \"farms\"\n        let sensors = [];\n        farms.forEach(farm => {\n            let ret = {\n                farmerId,\n                farmId: farm.farmId\n            };\n            farm.ranches.forEach(ranch => {\n                ret = {\n                    ...ret,\n                    ranchId: ranch.ranchId\n                };\n                ranch.clusters.forEach(cluster => {\n                    ret = {\n                        ...ret,\n                        clusterId: cluster.clusterId\n                    };\n                    cluster.sensors.forEach(sensor => {\n                        ret = {\n                            ...ret,\n                            ...sensor\n                        };\n                        sensors.push(ret);\n                    });\n                });\n            });\n        });\n        // document.writeln(JSON.stringify(sensors));\n        msg.payload = sensors;\n        node.send(msg);\n    }\n};\n\n// if 'farmdId' is not present in the query\n// return ALL nodes\nif (query.farmerId) {\n    const ret = [];\n    farms.forEach(farm => {\n        if (farm.farmerId == query.farmerId) {\n            ret.push(farm);\n        }\n    });\n\n    if (ret.length > 0) {\n        getFarm(ret, query.farmerId);\n    } else {\n        // no farms for this farmerId\n        // return nothing\n        // document.writeln(JSON.stringify([]));\n        msg.payload = [];\n        node.send(msg);\n    }\n} else {\n    // code to return ALL nodes\n    let sensors = [];\n    farms.forEach(farm => {\n        let ret = {\n            farmerId: farm.farmerId,\n            farmId: farm.farmId\n        };\n        farm.ranches.forEach(ranch => {\n            ret = {\n                ...ret,\n                ranchId: ranch.ranchId\n            };\n            ranch.clusters.forEach(cluster => {\n                ret = {\n                    ...ret,\n                    clusterId: cluster.clusterId\n                };\n                cluster.sensors.forEach(sensor => {\n                    ret = {\n                        ...ret,\n                        ...sensor\n                    };\n                    sensors.push(ret);\n                });\n            });\n        });\n    });\n    // document.writeln(JSON.stringify(sensors));\n    msg.payload = sensors;\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 200,
        "wires": [
            [
                "c8d660b3.3b0f6"
            ]
        ]
    },
    {
        "id": "5e6ddf45.a6cac",
        "type": "inject",
        "z": "85b67cb7.2993c",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 100,
        "y": 160,
        "wires": [
            [
                "ce62f948.9e3ad8"
            ]
        ]
    },
    {
        "id": "ce62f948.9e3ad8",
        "type": "function",
        "z": "85b67cb7.2993c",
        "name": "dummy farms",
        "func": "const farms = [\n  {\n    \"farmId\": \"1\",\n    \"farmerId\": \"farmer1\",\n    \"ranches\": [\n      {\n        \"ranchId\": \"1\",\n        \"clusters\": [\n          {\n            \"clusterId\": \"1\",\n            \"sensors\": [\n              {\n                \"sensorId\": \"1\",\n                \"type\": \"temperature\",\n                \"status\": \"ON\"\n              },\n              {\n                \"sensorId\": \"2\",\n                \"type\": \"soil\",\n                \"status\": \"ON\"\n              }\n            ]\n          },\n          {\n            \"clusterId\": \"2\",\n            \"sensors\": [\n              {\n                \"sensorId\": \"1\",\n                \"type\": \"temperature\",\n                \"status\": \"ON\"\n              },\n              {\n                \"sensorId\": \"2\",\n                \"type\": \"soil\",\n                \"status\": \"ON\"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        \"ranchId\": \"2\",\n        \"clusters\": [\n          {\n            \"clusterId\": \"1\",\n            \"sensors\": [\n              {\n                \"sensorId\": \"1\",\n                \"type\": \"temperature\",\n                \"status\": \"ON\"\n              },\n              {\n                \"sensorId\": \"2\",\n                \"type\": \"soil\",\n                \"status\": \"ON\"\n              }\n            ]\n          },\n          {\n            \"clusterId\": \"2\",\n            \"sensors\": [\n              {\n                \"sensorId\": \"1\",\n                \"type\": \"temperature\",\n                \"status\": \"ON\"\n              },\n              {\n                \"sensorId\": \"2\",\n                \"type\": \"soil\",\n                \"status\": \"ON\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    \"farmId\": \"2\",\n    \"farmerId\": \"farmer1\",\n    \"ranches\": [\n      {\n        \"ranchId\": \"1\",\n        \"clusters\": [\n          {\n            \"clusterId\": \"1\",\n            \"sensors\": [\n              {\n                \"sensorId\": \"1\",\n                \"type\": \"temperature\",\n                \"status\": \"ON\"\n              },\n              {\n                \"sensorId\": \"2\",\n                \"type\": \"soil\",\n                \"status\": \"ON\"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        \"ranchId\": \"2\",\n        \"clusters\": [\n          {\n            \"clusterId\": \"2\",\n            \"sensors\": [\n              {\n                \"sensorId\": \"1\",\n                \"type\": \"temperature\",\n                \"status\": \"ON\"\n              },\n              {\n                \"sensorId\": \"2\",\n                \"type\": \"soil\",\n                \"status\": \"ON\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    \"farmId\": \"1\",\n    \"farmerId\": \"farmer2\",\n    \"ranches\": [\n      {\n        \"ranchId\": \"1\",\n        \"clusters\": [\n          {\n            \"clusterId\": \"1\",\n            \"sensors\": [\n              {\n                \"sensorId\": \"1\",\n                \"type\": \"temperature\",\n                \"status\": \"ON\"\n              },\n              {\n                \"sensorId\": \"2\",\n                \"type\": \"soil\",\n                \"status\": \"ON\"\n              }\n            ]\n          },\n          {\n            \"clusterId\": \"2\",\n            \"sensors\": [\n              {\n                \"sensorId\": \"1\",\n                \"type\": \"temperature\",\n                \"status\": \"ON\"\n              },\n              {\n                \"sensorId\": \"2\",\n                \"type\": \"soil\",\n                \"status\": \"ON\"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        \"ranchId\": \"2\",\n        \"clusters\": [\n          {\n            \"clusterId\": \"1\",\n            \"sensors\": [\n              {\n                \"sensorId\": \"1\",\n                \"type\": \"temperature\",\n                \"status\": \"ON\"\n              },\n              {\n                \"sensorId\": \"2\",\n                \"type\": \"soil\",\n                \"status\": \"ON\"\n              }\n            ]\n          },\n          {\n            \"clusterId\": \"2\",\n            \"sensors\": [\n              {\n                \"sensorId\": \"1\",\n                \"type\": \"temperature\",\n                \"status\": \"ON\"\n              },\n              {\n                \"sensorId\": \"2\",\n                \"type\": \"soil\",\n                \"status\": \"ON\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    \"farmId\": \"2\",\n    \"farmerId\": \"farmer2\",\n    \"ranches\": [\n      {\n        \"ranchId\": \"1\",\n        \"clusters\": [\n          {\n            \"clusterId\": \"1\",\n            \"sensors\": [\n              {\n                \"sensorId\": \"1\",\n                \"type\": \"temperature\",\n                \"status\": \"ON\"\n              },\n              {\n                \"sensorId\": \"2\",\n                \"type\": \"soil\",\n                \"status\": \"ON\"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        \"ranchId\": \"2\",\n        \"clusters\": [\n          {\n            \"clusterId\": \"2\",\n            \"sensors\": [\n              {\n                \"sensorId\": \"1\",\n                \"type\": \"temperature\",\n                \"status\": \"ON\"\n              },\n              {\n                \"sensorId\": \"2\",\n                \"type\": \"soil\",\n                \"status\": \"ON\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n];\nflow.set(\"farms\", farms)",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "6eea6dfe.5b1d14",
        "type": "cassandra",
        "z": "79f883ec.307dec",
        "mydb": "ac401990.62d6b8",
        "name": "",
        "x": 530,
        "y": 40,
        "wires": [
            [
                "163da9e.0e12156"
            ]
        ]
    },
    {
        "id": "d14d7ee3.ba269",
        "type": "function",
        "z": "79f883ec.307dec",
        "name": "Coordinate query",
        "func": "//msg.topic = \"select * from cloud_sensor_data.SensorDataByFarmer where farmer_id = '1' and data_dump_dt = now() - interval 15 minute\";\nmsg.topic = \"select * from cloud_sensor_data.SensorDataByFarmer where farmer_id = '1'\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 40,
        "wires": [
            [
                "6eea6dfe.5b1d14"
            ]
        ]
    },
    {
        "id": "fd736485.aadd88",
        "type": "inject",
        "z": "79f883ec.307dec",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 40,
        "wires": [
            [
                "d14d7ee3.ba269"
            ]
        ]
    },
    {
        "id": "b297233d.9fc7d",
        "type": "ui_template",
        "z": "79f883ec.307dec",
        "group": "faca4658.70a1f8",
        "name": "Farmer sensor status",
        "order": 0,
        "width": "0",
        "height": "0",
        "format": "<table id=\"table\" border=\"1\">\n <tr>\n <th>Farmer ID</th>\n <th>Timestamp</th>\n <th>Ranch ID</th>\n <th>Cluster ID</th>\n  <th>Farm ID</th>\n <th>Sensor ID</th>\n <th>Sensor Type</th>\n <th>Timestamp</th>\n <th>Sensor Data</th>\n <th>Sensor Status</th>\n \n </tr>\n <tbody>\n <tr ng-repeat=\"row in msg.payload\">\n <td ng-repeat=\"item in row\" >{{item}}</td>\n </tr>\n </tbody>\n</table>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 920,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "163da9e.0e12156",
        "type": "function",
        "z": "79f883ec.307dec",
        "name": "threshold values",
        "func": "for(var i = 0; i< msg.payload.length; i++){\n    if(msg.payload[i].sensor_type === \"Temperature\")\n      {\n          if(msg.payload[i].sensor_data <='55')\n          {\n           msg.payload[i].notification =\"Temperature is below threshold level\";\n          }else if(msg.payload[i].sensor_data >='85' )\n          {\n           msg.payload[i].notification =\"Temperature above threshold level\";\n          }else\n          {\n           msg.payload[i].notification =\"\";\n          }\n          \n      }\n    if(msg.payload[i].sensor_type === \"humidity\")\n      {\n          if(msg.payload[i].sensor_data <='55')\n          {\n           msg.payload[i].notification =\"humidity is below threshold level\";\n          }else if(msg.payload[i].sensor_data >='85' )\n          {\n           msg.payload[i].notification =\"humidity above threshold level\";\n          }else\n          {\n           msg.payload[i].notification =\"\";\n          }\n          \n      }\n    if(msg.payload[i].sensor_type === \"Wind Speed\")\n      {\n          if(msg.payload[i].sensor_data <='55')\n          {\n           msg.payload[i].notification =\"Wind Speed is below threshold level\";\n          }else if(msg.payload[i].sensor_data >='85' )\n          {\n           msg.payload[i].notification =\"Wind Speed above threshold level\";\n          }else\n          {\n           msg.payload[i].notification =\"\";\n          }\n          \n      }\n    if(msg.payload[i].sensor_type === \"Rain\")\n      {\n          if(msg.payload[i].sensor_data <='55')\n          {\n           msg.payload[i].notification =\"Rain is below threshold level\";\n          }else if(msg.payload[i].sensor_data[i] >='85' )\n          {\n           msg.payload[i].notification =\"Rain above threshold level\";\n          }else\n          {\n           msg.payload[i].notification =\"\";\n          }\n          \n      }\n    if(msg.payload[i].sensor_type === \"Soil Moisture\")\n      {\n          if(msg.payload[i].sensor_data <='55')\n          {\n           msg.payload[i].notification =\"Soil Moisture is below threshold level\";\n          }else if(msg.payload[i].sensor_data >='85' )\n          {\n           msg.payload[i].notification =\"Soil Moisture above threshold level\";\n          }else\n          {\n           msg.payload[i].notification =\"\";\n          }\n          \n      }\n}\nreturn msg;\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 720,
        "y": 40,
        "wires": [
            [
                "b297233d.9fc7d"
            ]
        ]
    },
    {
        "id": "bd95181d.05db68",
        "type": "worldmap",
        "z": "79f883ec.307dec",
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "OSM",
        "cluster": "",
        "maxage": "",
        "usermenu": "hide",
        "panit": "true",
        "path": "worldmapfarmer",
        "x": 580,
        "y": 80,
        "wires": []
    },
    {
        "id": "b5d70812.8d5278",
        "type": "inject",
        "z": "79f883ec.307dec",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "9773d93e.cc2698"
            ]
        ]
    },
    {
        "id": "9773d93e.cc2698",
        "type": "function",
        "z": "79f883ec.307dec",
        "name": "",
        "func": "msg.topic =\" select * from Network.Farm_LocationbyFarmer \";",
        "outputs": 1,
        "noerr": 0,
        "x": 250,
        "y": 80,
        "wires": [
            [
                "5012be5.dfa984"
            ]
        ]
    },
    {
        "id": "129df461.5fca7c",
        "type": "inject",
        "z": "79f883ec.307dec",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "6ae9e149.7738d"
            ]
        ]
    },
    {
        "id": "9d9ae451.0012f8",
        "type": "ui_template",
        "z": "79f883ec.307dec",
        "group": "8fc6074c.ac30c8",
        "name": "Farm location maps",
        "order": 0,
        "width": "12",
        "height": "7",
        "format": "<div ng-bind-html=\"msg.payload | trusted\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 510,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "6ae9e149.7738d",
        "type": "template",
        "z": "79f883ec.307dec",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<iframe src=\"../worldmap\" width = 700px height=500px ></iframe>",
        "x": 310,
        "y": 200,
        "wires": [
            [
                "9d9ae451.0012f8"
            ]
        ]
    },
    {
        "id": "5012be5.dfa984",
        "type": "cassandra",
        "z": "79f883ec.307dec",
        "mydb": "d5689f9b.fd9db",
        "name": "",
        "x": 400,
        "y": 80,
        "wires": [
            [
                "bd95181d.05db68"
            ]
        ]
    },
    {
        "id": "5ac08a6a.f62dd4",
        "type": "worldmap",
        "z": "79f883ec.307dec",
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "OSM",
        "cluster": "",
        "maxage": "",
        "usermenu": "hide",
        "panit": "true",
        "path": "worldmapIOT",
        "x": 660,
        "y": 300,
        "wires": []
    },
    {
        "id": "eb152369.be45",
        "type": "inject",
        "z": "79f883ec.307dec",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "72ebb6e.ef66b48"
            ]
        ]
    },
    {
        "id": "72ebb6e.ef66b48",
        "type": "function",
        "z": "79f883ec.307dec",
        "name": "",
        "func": "msg.topic =\" select * from Network.Farm_LocationbyIOTManger \";",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 300,
        "wires": [
            [
                "1146f379.b5c7fd"
            ]
        ]
    },
    {
        "id": "8d14d8c2.d158d8",
        "type": "inject",
        "z": "79f883ec.307dec",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "73d94f7c.80d1"
            ]
        ]
    },
    {
        "id": "4337a592.d7ce5c",
        "type": "ui_template",
        "z": "79f883ec.307dec",
        "group": "fc6a590b.635c68",
        "name": "IOTlocation maps",
        "order": 0,
        "width": "14",
        "height": "7",
        "format": "<div ng-bind-html=\"msg.payload | trusted\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 510,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "73d94f7c.80d1",
        "type": "template",
        "z": "79f883ec.307dec",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<iframe src=\"../worldmap\" width = 700px height=500px ></iframe>",
        "x": 310,
        "y": 360,
        "wires": [
            [
                "4337a592.d7ce5c"
            ]
        ]
    },
    {
        "id": "defc6ddc.46424",
        "type": "ui_button",
        "z": "79f883ec.307dec",
        "name": "",
        "group": "fc6a590b.635c68",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Move Farmer",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-male",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "72ebb6e.ef66b48"
            ]
        ]
    },
    {
        "id": "1146f379.b5c7fd",
        "type": "cassandra",
        "z": "79f883ec.307dec",
        "mydb": "d5689f9b.fd9db",
        "name": "",
        "x": 460,
        "y": 300,
        "wires": [
            [
                "5ac08a6a.f62dd4"
            ]
        ]
    },
    {
        "id": "ed1c6045.60161",
        "type": "inject",
        "z": "79f883ec.307dec",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 110,
        "y": 440,
        "wires": [
            [
                "fa448244.fe8ae"
            ]
        ]
    },
    {
        "id": "3bed3590.33c40a",
        "type": "ui_chart",
        "z": "79f883ec.307dec",
        "name": "",
        "group": "af4976b1.2695a8",
        "order": 9,
        "width": "7",
        "height": "5",
        "label": "Soil Moisture",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 2,
        "x": 770,
        "y": 640,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "96ddb680.c232b8",
        "type": "ui_chart",
        "z": "79f883ec.307dec",
        "name": "",
        "group": "af4976b1.2695a8",
        "order": 5,
        "width": "7",
        "height": "5",
        "label": "WindSpeed",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 2,
        "x": 770,
        "y": 560,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d479f41.e14e408",
        "type": "ui_chart",
        "z": "79f883ec.307dec",
        "name": "",
        "group": "af4976b1.2695a8",
        "order": 7,
        "width": "7",
        "height": "5",
        "label": "Rain",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 2,
        "x": 750,
        "y": 600,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d57f169d.f56608",
        "type": "ui_chart",
        "z": "79f883ec.307dec",
        "name": "",
        "group": "af4976b1.2695a8",
        "order": 3,
        "width": "7",
        "height": "5",
        "label": "Humidity",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 2,
        "x": 760,
        "y": 520,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "fa448244.fe8ae",
        "type": "function",
        "z": "79f883ec.307dec",
        "name": "DB query",
        "func": "//msg.topic = \"select * from cloud_sensor_data.SensorData where data_dump_dt = now() - interval 15 minute\";\nmsg.topic = \"select * from cloud_sensor_data.SensorData\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 240,
        "y": 440,
        "wires": [
            [
                "c143737f.6d3d1"
            ]
        ]
    },
    {
        "id": "6be4188a.5353c8",
        "type": "ui_chart",
        "z": "79f883ec.307dec",
        "name": "Temperature",
        "group": "af4976b1.2695a8",
        "order": 1,
        "width": "7",
        "height": "5",
        "label": "Temperature",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Sensor",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 2,
        "x": 770,
        "y": 480,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c1b96ca0.71c3d",
        "type": "debug",
        "z": "79f883ec.307dec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 930,
        "y": 440,
        "wires": []
    },
    {
        "id": "bfaaa42c.2f5f88",
        "type": "ui_template",
        "z": "79f883ec.307dec",
        "group": "b40dd8b3.658c48",
        "name": "IOT Manager Monitoring table",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<table id=\"table\" border=\"1\">\n <tr>\n <th>Farm ID</th> \n <th>Ranch ID</th>\n <th>Cluster ID</th>\n <th>Sensor ID</th>\n <th>Sensor Type</th>\n <th>Timestamp</th>\n <th>Sensor Data</th>\n <th>Sensor Status</th>\n \n </tr>\n <tbody>\n <tr ng-repeat=\"row in msg.payload\">\n <td ng-repeat=\"item in row\" >{{item}}</td>\n </tr>\n </tbody>\n</table>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 690,
        "y": 440,
        "wires": [
            [
                "c1b96ca0.71c3d"
            ]
        ]
    },
    {
        "id": "8e5633e0.fd326",
        "type": "function",
        "z": "79f883ec.307dec",
        "name": "Parser",
        "func": "let arr = (msg.payload);\narr.forEach(sensor => {\n    const res = {\n        \"topic\": sensor.sensor_id,\n        \"payload\": sensor.sensor_data,\n        \"series\": sensor.sensor_id,\n    };\n    if(sensor.sensor_type === \"Temperature\") {\n        node.send([res,null,null,null,null]);\n    }\n    if(sensor.sensor_type === \"humidity\") {\n        node.send([null,res,null,null,null]);\n    }\n    if(sensor.sensor_type === \"Wind Speed\") {\n       node.send([null,null,res,null,null]);\n    }\n    if(sensor.sensor_type === \"Rain\") {\n      node.send([null,null,null,res,null]);\n    }\n    if(sensor.sensor_type === \"Soil Moisture\") {\n       node.send([null,null,null,null,res]);\n    }\n    \n    \n    \n});",
        "outputs": 5,
        "noerr": 0,
        "x": 590,
        "y": 520,
        "wires": [
            [
                "6be4188a.5353c8"
            ],
            [
                "d57f169d.f56608"
            ],
            [
                "96ddb680.c232b8"
            ],
            [
                "d479f41.e14e408"
            ],
            [
                "3bed3590.33c40a"
            ]
        ]
    },
    {
        "id": "fa924d96.e2f2b",
        "type": "function",
        "z": "79f883ec.307dec",
        "name": "Parser",
        "func": "let items = (msg.payload);\n_.countBy(data, function(items) { return data.name; });\nmsg.options = Object.keys(farm_id);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 480,
        "wires": [
            [
                "844641e1.7fc55"
            ]
        ]
    },
    {
        "id": "844641e1.7fc55",
        "type": "debug",
        "z": "79f883ec.307dec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 390,
        "y": 520,
        "wires": []
    },
    {
        "id": "c143737f.6d3d1",
        "type": "cassandra",
        "z": "79f883ec.307dec",
        "mydb": "fe13dd98.6254b",
        "name": "cloud_sensor_data",
        "x": 410,
        "y": 440,
        "wires": [
            [
                "bfaaa42c.2f5f88",
                "8e5633e0.fd326",
                "fa924d96.e2f2b"
            ]
        ]
    },
    {
        "id": "3ed330f8.6d6e8",
        "type": "inject",
        "z": "c583f54a.4c61d8",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 160,
        "y": 180,
        "wires": [
            [
                "7e2b2903.f7ff68"
            ]
        ]
    },
    {
        "id": "7e2b2903.f7ff68",
        "type": "function",
        "z": "c583f54a.4c61d8",
        "name": "process farms",
        "func": "const farms = flow.get(\"farms\") || [];\nfarms.forEach(farm => {\n    const res = { \"farmId\": farm.farmId };\n    node.send({\"payload\": {farm, res}});\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 220,
        "wires": [
            [
                "39640cf3.ff06b4"
            ]
        ]
    },
    {
        "id": "39640cf3.ff06b4",
        "type": "function",
        "z": "c583f54a.4c61d8",
        "name": "process ranches",
        "func": "const ranches = msg.payload.farm.ranches;\nconst fres = msg.payload.res;\nranches.forEach(ranch => {\n    const res = { ...fres, \"ranchId\": ranch.ranchId };\n    node.send({\"payload\": {ranch, res}});\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 260,
        "wires": [
            [
                "822e718b.40c13"
            ]
        ]
    },
    {
        "id": "822e718b.40c13",
        "type": "function",
        "z": "c583f54a.4c61d8",
        "name": "process clusters",
        "func": "const clusters = msg.payload.ranch.clusters;\nconst rres = msg.payload.res;\nclusters.forEach(cluster => {\n    const cres = {\n        ...rres,\n        \"clusterId\": cluster.clusterId\n    };\n    const sensors = cluster.sensors;\n    const arr = [];\n    sensors.forEach(sensor => {\n        const res = {\n            ...cres,\n            \"sensorId\": sensor.sensorId,\n            \"type\": sensor.type,\n            \"status\": sensor.status\n        };\n        if (res.status === \"ON\") {\n            if (res.type === \"temperature\") {\n                res.timestamp = new Date();\n                res.value = Math.random();\n                const hour = res.timestamp.getHours();\n                if (hour >= 7 && hour <= 12) {\n                    res.value = Math.floor(Math.random() * 4) + 40;\n                }\n                if (hour > 12 && hour <= 18) {\n                    res.value = Math.floor((Math.random() * 5) + 44);\n                }\n                if (hour > 18 && hour <= 23) {\n                    res.value = Math.floor((Math.random() * 4) + 35);\n                }\n            }\n            if (res.type === \"humidity\") {\n                res.timestamp = new Date();\n                res.value = Math.random();\n                const hour = res.timestamp.getHours();\n                if (hour >= 7 && hour <= 12) {\n                    res.value = Math.floor(Math.random() * 6) + 70;\n                }\n                if (hour > 12 && hour <= 18) {\n                    res.value = Math.floor((Math.random() * 6) + 60);\n                }\n                if (hour > 18 && hour <= 23) {\n                    res.value = Math.floor((Math.random() * 6) + 65);\n                }\n            }\n            if (res.type === \"windSpeed\") {\n                res.timestamp = new Date();\n                res.value = Math.random();\n                res.value = Math.floor((Math.random() * 5) + 8);\n            }\n            if (res.type === \"rain\") {\n                res.timestamp = new Date();\n                res.value = Math.random();\n               // const hour = sres.timestamp.getHours();\n                res.value = Math.floor(Math.random() * 3) + 0;\n            }\n            if (res.type === \"soilMoisture\") {\n                res.timestamp = new Date();\n                res.value = Math.floor((Math.random() * 2) + 5);\n            }\n            arr.push(res);\n        }\n    });\n    node.send({\n        \"payload\": arr\n    });\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 400,
        "y": 300,
        "wires": [
            [
                "a6b1363.37fc1c8"
            ]
        ]
    },
    {
        "id": "a6b1363.37fc1c8",
        "type": "mqtt out",
        "z": "c583f54a.4c61d8",
        "name": "/clustertopic",
        "topic": "/clustertopic",
        "qos": "1",
        "retain": "",
        "broker": "b427e3f9.55255",
        "x": 510,
        "y": 340,
        "wires": []
    },
    {
        "id": "edba72cc.10ed9",
        "type": "mqtt in",
        "z": "c583f54a.4c61d8",
        "name": "/clustertopic",
        "topic": "/clustertopic",
        "qos": "2",
        "broker": "b427e3f9.55255",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "f1a1f23.3a7561",
                "ead15d50.41e6c"
            ]
        ]
    },
    {
        "id": "7384e529.3869bc",
        "type": "function",
        "z": "c583f54a.4c61d8",
        "name": "json parse",
        "func": "try {\n    \n    var i;\n    var m = \"BEGIN BATCH \";\n    var stmt;\n    var n=1;\n    for (i = 0; i < msg.payload.length; i++) {\n        var a;\n        a= msg.payload[i];\n     \n       // m += \"INSERT INTO sample.Sensor (farm_id,data_dump_dt,ranch_id) VALUES ('\"+a.farmId+\"','\"+a.timestamp+\"','\"+a.ranchId+\"');\\n\";\n       // m += \"INSERT INTO sample.SensorData (Farm_id,Ranch_Id,clusterId,sensorId,sensor_type,status,sensor_value,data_dump_dt) VALUES ('\"+a.farmId+\"','\"+a.ranchId+\"','\"+a.clusterId+\"','\"+a.sensorId+\"','\"+a.type+\"','\"+a.status+\"','\"+a.value+\"','\"+a.timestamp+\"');\\n\";\n       m += \"INSERT INTO cloud_sensor_data.sensordata (farmer_id,farm_id,ranch_id,cluster_id,sensor_id,sensor_type,sensor_status,sensor_data,data_dump_dt) VALUES ('\"+n+\"','\"+a.farmId+\"','\"+a.ranchId+\"','\"+a.clusterId+\"','\"+a.sensorId+\"','\"+a.type+\"','\"+a.status+\"','\"+a.value+\"','\"+a.timestamp+\"');\\n\";\n       m += \"INSERT INTO cloud_sensor_data.sensordatabyfarmer (Farmer_id,farm_id,ranch_id,cluster_id,sensor_id,sensor_type,sensor_status,sensor_data,data_dump_dt) VALUES ('\"+n+\"','\"+a.farmId+\"','\"+a.ranchId+\"','\"+a.clusterId+\"','\"+a.sensorId+\"','\"+a.type+\"','\"+a.status+\"','\"+a.value+\"','\"+a.timestamp+\"');\\n\";\n       m += \"INSERT INTO cloud_sensor_data.DataByFarm (farm_id,ranch_id,cluster_id,sensor_id,sensor_type,sensor_data,data_dump_dt) VALUES ('\"+a.farmId+\"','\"+a.ranchId+\"','\"+a.clusterId+\"','\"+a.sensorId+\"','\"+a.type+\"','\"+a.value+\"','\"+a.timestamp+\"');\\n\";\n       m += \"INSERT INTO cloud_sensor_data.databyranch (ranch_id,cluster_id,sensor_id,sensor_type,sensor_data,data_dump_dt) VALUES ('\"+a.ranchId+\"','\"+a.clusterId+\"','\"+a.sensorId+\"','\"+a.type+\"','\"+a.value+\"','\"+a.timestamp+\"');\\n\";\n       m += \"INSERT INTO cloud_sensor_data.DataByCluster (cluster_id,sensor_id,sensor_type,sensor_data,data_dump_dt) VALUES ('\"+a.clusterId+\"','\"+a.sensorId+\"','\"+a.type+\"','\"+a.value+\"','\"+a.timestamp+\"');\\n\";\n      // m += \"Insert into cloud_sensor_data.StatusCheck (Sensor_Id,Cluster_Id,Sensor_StatusSensor_type,Data_dump_dt) VALUES();\"\n    }\n    \n    m += \"APPLY BATCH;\";\n    msg.topic = m;\n    msg.payload = null;\n    node.warn(msg);\n    \n} catch (e) {\n    node.error(`error in json parse: ${e}`);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 480,
        "wires": [
            [
                "2d7126a4.b2549a"
            ]
        ]
    },
    {
        "id": "f1a1f23.3a7561",
        "type": "json",
        "z": "c583f54a.4c61d8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 190,
        "y": 480,
        "wires": [
            [
                "7384e529.3869bc"
            ]
        ]
    },
    {
        "id": "2d7126a4.b2549a",
        "type": "cassandra",
        "z": "c583f54a.4c61d8",
        "mydb": "95405a5.d019ea8",
        "name": "",
        "x": 570,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "6fb6069c.4aa638",
        "type": "debug",
        "z": "c583f54a.4c61d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 590,
        "y": 400,
        "wires": []
    },
    {
        "id": "ead15d50.41e6c",
        "type": "function",
        "z": "c583f54a.4c61d8",
        "name": "json parse",
        "func": "try {\n    msg.payload = JSON.parse(msg.payload);\n} catch (e) {\n    node.error(`error in json parse: ${e}`);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 400,
        "wires": [
            [
                "6fb6069c.4aa638"
            ]
        ]
    },
    {
        "id": "be909078.3081d",
        "type": "function",
        "z": "c583f54a.4c61d8",
        "name": "process add farm",
        "func": "const newFarm = msg.req.body.farm;\nconst farms = flow.get(\"farms\") || [];\nfarms.push(newFarm);\nflow.set(\"farms\", farms);\nmsg.payload = farms;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 418,
        "y": 62,
        "wires": [
            [
                "55ac7559.9b3b6c"
            ]
        ]
    },
    {
        "id": "4744ea26.c2d524",
        "type": "http in",
        "z": "c583f54a.4c61d8",
        "name": "POST /farms",
        "url": "/farms",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 173,
        "y": 63,
        "wires": [
            [
                "be909078.3081d"
            ]
        ]
    },
    {
        "id": "55ac7559.9b3b6c",
        "type": "http response",
        "z": "c583f54a.4c61d8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 60,
        "wires": []
    },
    {
        "id": "cdfbe1be.58f36",
        "type": "http response",
        "z": "c583f54a.4c61d8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 120,
        "wires": []
    },
    {
        "id": "1d9bdf0c.7a7401",
        "type": "http in",
        "z": "c583f54a.4c61d8",
        "name": "GET /farms",
        "url": "/farms",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 167,
        "y": 127,
        "wires": [
            [
                "15dafd8c.5f7b12"
            ]
        ]
    },
    {
        "id": "15dafd8c.5f7b12",
        "type": "function",
        "z": "c583f54a.4c61d8",
        "name": "process get farm",
        "func": "node.warn(flow.get(\"farms\"))\nconst farms = flow.get(\"farms\") || [];\nmsg.payload = farms;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 417,
        "y": 129,
        "wires": [
            [
                "cdfbe1be.58f36"
            ]
        ]
    }
]